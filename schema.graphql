# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type MailSendLog {
  id: ID!
  to: String
  subject: String
  body: String
  readAt: DateTime
  sentAt: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input MailSendLogWhereUniqueInput {
  id: ID
}

input MailSendLogWhereInput {
  AND: [MailSendLogWhereInput!]
  OR: [MailSendLogWhereInput!]
  NOT: [MailSendLogWhereInput!]
  id: IDFilter
  to: StringFilter
  subject: StringFilter
  body: StringFilter
  readAt: DateTimeNullableFilter
  sentAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input MailSendLogOrderByInput {
  id: OrderDirection
  to: OrderDirection
  subject: OrderDirection
  body: OrderDirection
  readAt: OrderDirection
  sentAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input MailSendLogUpdateInput {
  to: String
  subject: String
  body: String
  readAt: DateTime
  sentAt: DateTime
}

input MailSendLogUpdateArgs {
  where: MailSendLogWhereUniqueInput!
  data: MailSendLogUpdateInput!
}

input MailSendLogCreateInput {
  to: String
  subject: String
  body: String
  readAt: DateTime
  sentAt: DateTime
}

type ServerLog {
  id: ID!
  method: String
  url: String
  graphql: String
  status: String
  elapsed: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

input ServerLogWhereUniqueInput {
  id: ID
}

input ServerLogWhereInput {
  AND: [ServerLogWhereInput!]
  OR: [ServerLogWhereInput!]
  NOT: [ServerLogWhereInput!]
  id: IDFilter
  method: StringFilter
  url: StringFilter
  graphql: StringFilter
  status: StringFilter
  elapsed: StringFilter
  userID: StringFilter
  errorMessage: StringFilter
  createdAt: DateTimeNullableFilter
}

input ServerLogOrderByInput {
  id: OrderDirection
  method: OrderDirection
  url: OrderDirection
  graphql: OrderDirection
  status: OrderDirection
  elapsed: OrderDirection
  userID: OrderDirection
  errorMessage: OrderDirection
  createdAt: OrderDirection
}

input ServerLogUpdateInput {
  method: String
  url: String
  graphql: String
  status: String
  elapsed: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

input ServerLogUpdateArgs {
  where: ServerLogWhereUniqueInput!
  data: ServerLogUpdateInput!
}

input ServerLogCreateInput {
  method: String
  url: String
  graphql: String
  status: String
  elapsed: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

type ServerError {
  id: ID!
  errorMessage: String
  url: String
  graphql: String
  createdAt: DateTime
  status: String
  method: String
  userID: String
}

input ServerErrorWhereUniqueInput {
  id: ID
}

input ServerErrorWhereInput {
  AND: [ServerErrorWhereInput!]
  OR: [ServerErrorWhereInput!]
  NOT: [ServerErrorWhereInput!]
  id: IDFilter
  errorMessage: StringFilter
  url: StringFilter
  graphql: StringFilter
  createdAt: DateTimeNullableFilter
  status: StringFilter
  method: StringFilter
  userID: StringFilter
}

input ServerErrorOrderByInput {
  id: OrderDirection
  errorMessage: OrderDirection
  url: OrderDirection
  graphql: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  method: OrderDirection
  userID: OrderDirection
}

input ServerErrorUpdateInput {
  errorMessage: String
  url: String
  graphql: String
  createdAt: DateTime
  status: String
  method: String
  userID: String
}

input ServerErrorUpdateArgs {
  where: ServerErrorWhereUniqueInput!
  data: ServerErrorUpdateInput!
}

input ServerErrorCreateInput {
  errorMessage: String
  url: String
  graphql: String
  createdAt: DateTime
  status: String
  method: String
  userID: String
}

type MailTrackHistory {
  id: ID!
  to: String
  subject: String
  mailTrackReferenceID: String
  createdAt: DateTime
}

input MailTrackHistoryWhereUniqueInput {
  id: ID
}

input MailTrackHistoryWhereInput {
  AND: [MailTrackHistoryWhereInput!]
  OR: [MailTrackHistoryWhereInput!]
  NOT: [MailTrackHistoryWhereInput!]
  id: IDFilter
  to: StringFilter
  subject: StringFilter
  mailTrackReferenceID: StringFilter
  createdAt: DateTimeNullableFilter
}

input MailTrackHistoryOrderByInput {
  id: OrderDirection
  to: OrderDirection
  subject: OrderDirection
  mailTrackReferenceID: OrderDirection
  createdAt: OrderDirection
}

input MailTrackHistoryUpdateInput {
  to: String
  subject: String
  mailTrackReferenceID: String
  createdAt: DateTime
}

input MailTrackHistoryUpdateArgs {
  where: MailTrackHistoryWhereUniqueInput!
  data: MailTrackHistoryUpdateInput!
}

input MailTrackHistoryCreateInput {
  to: String
  subject: String
  mailTrackReferenceID: String
  createdAt: DateTime
}

type User {
  id: ID!
  prefix: String
  name: String
  middleName: String
  lastName: String
  suffix: String
  displayName: String
  email: String
  avatar: ImageFieldOutput
  role: UserRoleType
  createdAt: DateTime
  updatedAt: DateTime
  lastLogin: DateTime
  loginHistory(
    where: UserLoginHistoryWhereInput! = {}
    orderBy: [UserLoginHistoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserLoginHistoryWhereUniqueInput
  ): [UserLoginHistory!]
  loginHistoryCount(where: UserLoginHistoryWhereInput! = {}): Int
  flags(
    where: UserFlagWhereInput! = {}
    orderBy: [UserFlagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserFlagWhereUniqueInput
  ): [UserFlag!]
  flagsCount(where: UserFlagWhereInput! = {}): Int
  systemFlags(
    where: UserSystemFlagWhereInput! = {}
    orderBy: [UserSystemFlagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserSystemFlagWhereUniqueInput
  ): [UserSystemFlag!]
  systemFlagsCount(where: UserSystemFlagWhereInput! = {}): Int
  about: String
  adminPassword: PasswordState
  groups(
    where: GroupMemberWhereInput! = {}
    orderBy: [GroupMemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GroupMemberWhereUniqueInput
  ): [GroupMember!]
  groupsCount(where: GroupMemberWhereInput! = {}): Int
  netforum_cstKey: String
  netforum_recno: String
  educportal_id: String
  home_phoneNumber: String
  business_phoneNumber: String
  cell_phoneNumber: String
  home_addressLine1: String
  home_addressLine2: String
  home_city: String
  home_state: String
  home_postalCode: String
  home_country: String
  business_addressLine1: String
  business_addressLine2: String
  business_city: String
  business_state: String
  business_postalCode: String
  business_country: String
  dental_degree: String
  dental_school: String
  dental_graduationYear: String
  ortho_degree: String
  ortho_school: String
  ortho_graduationYear: String
  postgraduate_degree: String
  postgraduate_school: String
  postgraduate_graduationYear: String
  joinDate: DateTime
  rejoinDate: DateTime
  effectiveDate: DateTime
  expirationDate: DateTime
  memberType: String
  memberPackage: String
  society: String
  isBlacklisted: Boolean
  importFrom: String
  educationRecords(
    where: UserEducationRecordWhereInput! = {}
    orderBy: [UserEducationRecordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserEducationRecordWhereUniqueInput
  ): [UserEducationRecord!]
  educationRecordsCount(where: UserEducationRecordWhereInput! = {}): Int
  notes(
    where: UserNoteWhereInput! = {}
    orderBy: [UserNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserNoteWhereUniqueInput
  ): [UserNote!]
  notesCount(where: UserNoteWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum UserRoleType {
  dev
  admin
  user
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  prefix: StringFilter
  name: StringFilter
  middleName: StringFilter
  lastName: StringFilter
  suffix: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  lastLogin: DateTimeNullableFilter
  loginHistory: UserLoginHistoryManyRelationFilter
  flags: UserFlagManyRelationFilter
  systemFlags: UserSystemFlagManyRelationFilter
  about: StringFilter
  adminPassword: PasswordFilter
  groups: GroupMemberManyRelationFilter
  netforum_cstKey: StringFilter
  netforum_recno: StringFilter
  educportal_id: StringFilter
  home_phoneNumber: StringFilter
  business_phoneNumber: StringFilter
  cell_phoneNumber: StringFilter
  home_addressLine1: StringFilter
  home_addressLine2: StringFilter
  home_city: StringFilter
  home_state: StringFilter
  home_postalCode: StringFilter
  home_country: StringFilter
  business_addressLine1: StringFilter
  business_addressLine2: StringFilter
  business_city: StringFilter
  business_state: StringFilter
  business_postalCode: StringFilter
  business_country: StringFilter
  dental_degree: StringFilter
  dental_school: StringFilter
  dental_graduationYear: StringFilter
  ortho_degree: StringFilter
  ortho_school: StringFilter
  ortho_graduationYear: StringFilter
  postgraduate_degree: StringFilter
  postgraduate_school: StringFilter
  postgraduate_graduationYear: StringFilter
  joinDate: DateTimeNullableFilter
  rejoinDate: DateTimeNullableFilter
  effectiveDate: DateTimeNullableFilter
  expirationDate: DateTimeNullableFilter
  memberType: StringFilter
  memberPackage: StringFilter
  society: StringFilter
  isBlacklisted: BooleanFilter
  importFrom: StringFilter
  educationRecords: UserEducationRecordManyRelationFilter
  notes: UserNoteManyRelationFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input UserLoginHistoryManyRelationFilter {
  every: UserLoginHistoryWhereInput
  some: UserLoginHistoryWhereInput
  none: UserLoginHistoryWhereInput
}

input UserFlagManyRelationFilter {
  every: UserFlagWhereInput
  some: UserFlagWhereInput
  none: UserFlagWhereInput
}

input UserSystemFlagManyRelationFilter {
  every: UserSystemFlagWhereInput
  some: UserSystemFlagWhereInput
  none: UserSystemFlagWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input GroupMemberManyRelationFilter {
  every: GroupMemberWhereInput
  some: GroupMemberWhereInput
  none: GroupMemberWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserEducationRecordManyRelationFilter {
  every: UserEducationRecordWhereInput
  some: UserEducationRecordWhereInput
  none: UserEducationRecordWhereInput
}

input UserNoteManyRelationFilter {
  every: UserNoteWhereInput
  some: UserNoteWhereInput
  none: UserNoteWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  prefix: OrderDirection
  name: OrderDirection
  middleName: OrderDirection
  lastName: OrderDirection
  suffix: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  lastLogin: OrderDirection
  about: OrderDirection
  netforum_cstKey: OrderDirection
  netforum_recno: OrderDirection
  educportal_id: OrderDirection
  home_phoneNumber: OrderDirection
  business_phoneNumber: OrderDirection
  cell_phoneNumber: OrderDirection
  home_addressLine1: OrderDirection
  home_addressLine2: OrderDirection
  home_city: OrderDirection
  home_state: OrderDirection
  home_postalCode: OrderDirection
  home_country: OrderDirection
  business_addressLine1: OrderDirection
  business_addressLine2: OrderDirection
  business_city: OrderDirection
  business_state: OrderDirection
  business_postalCode: OrderDirection
  business_country: OrderDirection
  dental_degree: OrderDirection
  dental_school: OrderDirection
  dental_graduationYear: OrderDirection
  ortho_degree: OrderDirection
  ortho_school: OrderDirection
  ortho_graduationYear: OrderDirection
  postgraduate_degree: OrderDirection
  postgraduate_school: OrderDirection
  postgraduate_graduationYear: OrderDirection
  joinDate: OrderDirection
  rejoinDate: OrderDirection
  effectiveDate: OrderDirection
  expirationDate: OrderDirection
  memberType: OrderDirection
  memberPackage: OrderDirection
  society: OrderDirection
  isBlacklisted: OrderDirection
  importFrom: OrderDirection
}

input UserUpdateInput {
  prefix: String
  name: String
  middleName: String
  lastName: String
  suffix: String
  email: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  updatedAt: DateTime
  lastLogin: DateTime
  loginHistory: UserLoginHistoryRelateToManyForUpdateInput
  flags: UserFlagRelateToManyForUpdateInput
  systemFlags: UserSystemFlagRelateToManyForUpdateInput
  about: String
  adminPassword: String
  groups: GroupMemberRelateToManyForUpdateInput
  netforum_cstKey: String
  netforum_recno: String
  educportal_id: String
  home_phoneNumber: String
  business_phoneNumber: String
  cell_phoneNumber: String
  home_addressLine1: String
  home_addressLine2: String
  home_city: String
  home_state: String
  home_postalCode: String
  home_country: String
  business_addressLine1: String
  business_addressLine2: String
  business_city: String
  business_state: String
  business_postalCode: String
  business_country: String
  dental_degree: String
  dental_school: String
  dental_graduationYear: String
  ortho_degree: String
  ortho_school: String
  ortho_graduationYear: String
  postgraduate_degree: String
  postgraduate_school: String
  postgraduate_graduationYear: String
  joinDate: DateTime
  rejoinDate: DateTime
  effectiveDate: DateTime
  expirationDate: DateTime
  memberType: String
  memberPackage: String
  society: String
  isBlacklisted: Boolean
  importFrom: String
  educationRecords: UserEducationRecordRelateToManyForUpdateInput
  notes: UserNoteRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserLoginHistoryRelateToManyForUpdateInput {
  disconnect: [UserLoginHistoryWhereUniqueInput!]
  set: [UserLoginHistoryWhereUniqueInput!]
  create: [UserLoginHistoryCreateInput!]
  connect: [UserLoginHistoryWhereUniqueInput!]
}

input UserFlagRelateToManyForUpdateInput {
  disconnect: [UserFlagWhereUniqueInput!]
  set: [UserFlagWhereUniqueInput!]
  create: [UserFlagCreateInput!]
  connect: [UserFlagWhereUniqueInput!]
}

input UserSystemFlagRelateToManyForUpdateInput {
  disconnect: [UserSystemFlagWhereUniqueInput!]
  set: [UserSystemFlagWhereUniqueInput!]
  create: [UserSystemFlagCreateInput!]
  connect: [UserSystemFlagWhereUniqueInput!]
}

input GroupMemberRelateToManyForUpdateInput {
  disconnect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input UserEducationRecordRelateToManyForUpdateInput {
  disconnect: [UserEducationRecordWhereUniqueInput!]
  set: [UserEducationRecordWhereUniqueInput!]
  create: [UserEducationRecordCreateInput!]
  connect: [UserEducationRecordWhereUniqueInput!]
}

input UserNoteRelateToManyForUpdateInput {
  disconnect: [UserNoteWhereUniqueInput!]
  set: [UserNoteWhereUniqueInput!]
  create: [UserNoteCreateInput!]
  connect: [UserNoteWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  prefix: String
  name: String
  middleName: String
  lastName: String
  suffix: String
  email: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  updatedAt: DateTime
  lastLogin: DateTime
  loginHistory: UserLoginHistoryRelateToManyForCreateInput
  flags: UserFlagRelateToManyForCreateInput
  systemFlags: UserSystemFlagRelateToManyForCreateInput
  about: String
  adminPassword: String
  groups: GroupMemberRelateToManyForCreateInput
  netforum_cstKey: String
  netforum_recno: String
  educportal_id: String
  home_phoneNumber: String
  business_phoneNumber: String
  cell_phoneNumber: String
  home_addressLine1: String
  home_addressLine2: String
  home_city: String
  home_state: String
  home_postalCode: String
  home_country: String
  business_addressLine1: String
  business_addressLine2: String
  business_city: String
  business_state: String
  business_postalCode: String
  business_country: String
  dental_degree: String
  dental_school: String
  dental_graduationYear: String
  ortho_degree: String
  ortho_school: String
  ortho_graduationYear: String
  postgraduate_degree: String
  postgraduate_school: String
  postgraduate_graduationYear: String
  joinDate: DateTime
  rejoinDate: DateTime
  effectiveDate: DateTime
  expirationDate: DateTime
  memberType: String
  memberPackage: String
  society: String
  isBlacklisted: Boolean
  importFrom: String
  educationRecords: UserEducationRecordRelateToManyForCreateInput
  notes: UserNoteRelateToManyForCreateInput
}

input UserLoginHistoryRelateToManyForCreateInput {
  create: [UserLoginHistoryCreateInput!]
  connect: [UserLoginHistoryWhereUniqueInput!]
}

input UserFlagRelateToManyForCreateInput {
  create: [UserFlagCreateInput!]
  connect: [UserFlagWhereUniqueInput!]
}

input UserSystemFlagRelateToManyForCreateInput {
  create: [UserSystemFlagCreateInput!]
  connect: [UserSystemFlagWhereUniqueInput!]
}

input GroupMemberRelateToManyForCreateInput {
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input UserEducationRecordRelateToManyForCreateInput {
  create: [UserEducationRecordCreateInput!]
  connect: [UserEducationRecordWhereUniqueInput!]
}

input UserNoteRelateToManyForCreateInput {
  create: [UserNoteCreateInput!]
  connect: [UserNoteWhereUniqueInput!]
}

type UserLoginHistory {
  id: ID!
  user: User
  createdAt: DateTime
  ipAddress: String
  userAgent: String
}

input UserLoginHistoryWhereUniqueInput {
  id: ID
}

input UserLoginHistoryWhereInput {
  AND: [UserLoginHistoryWhereInput!]
  OR: [UserLoginHistoryWhereInput!]
  NOT: [UserLoginHistoryWhereInput!]
  id: IDFilter
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
  ipAddress: StringFilter
  userAgent: StringFilter
}

input UserLoginHistoryOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  ipAddress: OrderDirection
  userAgent: OrderDirection
}

input UserLoginHistoryUpdateInput {
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
  ipAddress: String
  userAgent: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserLoginHistoryUpdateArgs {
  where: UserLoginHistoryWhereUniqueInput!
  data: UserLoginHistoryUpdateInput!
}

input UserLoginHistoryCreateInput {
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
  ipAddress: String
  userAgent: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserFlag {
  id: ID!
  user: User
  createdAt: DateTime
  key: String
  description: String
  value: String
  metadata: String
}

input UserFlagWhereUniqueInput {
  id: ID
}

input UserFlagWhereInput {
  AND: [UserFlagWhereInput!]
  OR: [UserFlagWhereInput!]
  NOT: [UserFlagWhereInput!]
  id: IDFilter
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
  key: StringFilter
  description: StringFilter
  value: StringFilter
  metadata: StringFilter
}

input UserFlagOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  key: OrderDirection
  description: OrderDirection
  value: OrderDirection
  metadata: OrderDirection
}

input UserFlagUpdateInput {
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
  key: String
  description: String
  value: String
  metadata: String
}

input UserFlagUpdateArgs {
  where: UserFlagWhereUniqueInput!
  data: UserFlagUpdateInput!
}

input UserFlagCreateInput {
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
  key: String
  description: String
  value: String
  metadata: String
}

type UserSystemFlag {
  id: ID!
  user: User
  key: String
  description: String
  value: String
  metadata: String
}

input UserSystemFlagWhereUniqueInput {
  id: ID
}

input UserSystemFlagWhereInput {
  AND: [UserSystemFlagWhereInput!]
  OR: [UserSystemFlagWhereInput!]
  NOT: [UserSystemFlagWhereInput!]
  id: IDFilter
  user: UserWhereInput
  key: StringFilter
  description: StringFilter
  value: StringFilter
  metadata: StringFilter
}

input UserSystemFlagOrderByInput {
  id: OrderDirection
  key: OrderDirection
  description: OrderDirection
  value: OrderDirection
  metadata: OrderDirection
}

input UserSystemFlagUpdateInput {
  user: UserRelateToOneForUpdateInput
  key: String
  description: String
  value: String
  metadata: String
}

input UserSystemFlagUpdateArgs {
  where: UserSystemFlagWhereUniqueInput!
  data: UserSystemFlagUpdateInput!
}

input UserSystemFlagCreateInput {
  user: UserRelateToOneForCreateInput
  key: String
  description: String
  value: String
  metadata: String
}

type UserEducationRecord {
  id: ID!
  user: User
  courseID: String
  schoolName: String
  achievement: String
  dateOfAchievement: DateTime
}

input UserEducationRecordWhereUniqueInput {
  id: ID
}

input UserEducationRecordWhereInput {
  AND: [UserEducationRecordWhereInput!]
  OR: [UserEducationRecordWhereInput!]
  NOT: [UserEducationRecordWhereInput!]
  id: IDFilter
  user: UserWhereInput
  courseID: StringFilter
  schoolName: StringFilter
  achievement: StringFilter
  dateOfAchievement: DateTimeNullableFilter
}

input UserEducationRecordOrderByInput {
  id: OrderDirection
  courseID: OrderDirection
  schoolName: OrderDirection
  achievement: OrderDirection
  dateOfAchievement: OrderDirection
}

input UserEducationRecordUpdateInput {
  user: UserRelateToOneForUpdateInput
  courseID: String
  schoolName: String
  achievement: String
  dateOfAchievement: DateTime
}

input UserEducationRecordUpdateArgs {
  where: UserEducationRecordWhereUniqueInput!
  data: UserEducationRecordUpdateInput!
}

input UserEducationRecordCreateInput {
  user: UserRelateToOneForCreateInput
  courseID: String
  schoolName: String
  achievement: String
  dateOfAchievement: DateTime
}

type UserNote {
  id: ID!
  user: User
  content: String
  type: String
  title: String
  metadata: String
  createdAt: DateTime
}

input UserNoteWhereUniqueInput {
  id: ID
}

input UserNoteWhereInput {
  AND: [UserNoteWhereInput!]
  OR: [UserNoteWhereInput!]
  NOT: [UserNoteWhereInput!]
  id: IDFilter
  user: UserWhereInput
  content: StringFilter
  type: StringFilter
  title: StringFilter
  metadata: StringFilter
  createdAt: DateTimeNullableFilter
}

input UserNoteOrderByInput {
  id: OrderDirection
  content: OrderDirection
  type: OrderDirection
  title: OrderDirection
  metadata: OrderDirection
  createdAt: OrderDirection
}

input UserNoteUpdateInput {
  user: UserRelateToOneForUpdateInput
  content: String
  type: String
  title: String
  metadata: String
  createdAt: DateTime
}

input UserNoteUpdateArgs {
  where: UserNoteWhereUniqueInput!
  data: UserNoteUpdateInput!
}

input UserNoteCreateInput {
  user: UserRelateToOneForCreateInput
  content: String
  type: String
  title: String
  metadata: String
  createdAt: DateTime
}

type Group {
  id: ID!
  name: String
  members(
    where: GroupMemberWhereInput! = {}
    orderBy: [GroupMemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GroupMemberWhereUniqueInput
  ): [GroupMember!]
  membersCount(where: GroupMemberWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  groupLogo: String
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  members: GroupMemberManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  groupLogo: StringFilter
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  groupLogo: OrderDirection
}

input GroupUpdateInput {
  name: String
  members: GroupMemberRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  groupLogo: String
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  members: GroupMemberRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  groupLogo: String
}

type GroupMember {
  id: ID!
  group: Group
  user: User
  access: Int
  flags(
    where: GroupMemberFlagWhereInput! = {}
    orderBy: [GroupMemberFlagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GroupMemberFlagWhereUniqueInput
  ): [GroupMemberFlag!]
  flagsCount(where: GroupMemberFlagWhereInput! = {}): Int
}

input GroupMemberWhereUniqueInput {
  id: ID
}

input GroupMemberWhereInput {
  AND: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  NOT: [GroupMemberWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  user: UserWhereInput
  access: IntNullableFilter
  flags: GroupMemberFlagManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input GroupMemberFlagManyRelationFilter {
  every: GroupMemberFlagWhereInput
  some: GroupMemberFlagWhereInput
  none: GroupMemberFlagWhereInput
}

input GroupMemberOrderByInput {
  id: OrderDirection
  access: OrderDirection
}

input GroupMemberUpdateInput {
  group: GroupRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  access: Int
  flags: GroupMemberFlagRelateToManyForUpdateInput
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input GroupMemberFlagRelateToManyForUpdateInput {
  disconnect: [GroupMemberFlagWhereUniqueInput!]
  set: [GroupMemberFlagWhereUniqueInput!]
  create: [GroupMemberFlagCreateInput!]
  connect: [GroupMemberFlagWhereUniqueInput!]
}

input GroupMemberUpdateArgs {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateInput!
}

input GroupMemberCreateInput {
  group: GroupRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  access: Int
  flags: GroupMemberFlagRelateToManyForCreateInput
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input GroupMemberFlagRelateToManyForCreateInput {
  create: [GroupMemberFlagCreateInput!]
  connect: [GroupMemberFlagWhereUniqueInput!]
}

type GroupMemberFlag {
  id: ID!
  groupMember: GroupMember
  flag: String
}

input GroupMemberFlagWhereUniqueInput {
  id: ID
}

input GroupMemberFlagWhereInput {
  AND: [GroupMemberFlagWhereInput!]
  OR: [GroupMemberFlagWhereInput!]
  NOT: [GroupMemberFlagWhereInput!]
  id: IDFilter
  groupMember: GroupMemberWhereInput
  flag: StringFilter
}

input GroupMemberFlagOrderByInput {
  id: OrderDirection
  flag: OrderDirection
}

input GroupMemberFlagUpdateInput {
  groupMember: GroupMemberRelateToOneForUpdateInput
  flag: String
}

input GroupMemberRelateToOneForUpdateInput {
  create: GroupMemberCreateInput
  connect: GroupMemberWhereUniqueInput
  disconnect: Boolean
}

input GroupMemberFlagUpdateArgs {
  where: GroupMemberFlagWhereUniqueInput!
  data: GroupMemberFlagUpdateInput!
}

input GroupMemberFlagCreateInput {
  groupMember: GroupMemberRelateToOneForCreateInput
  flag: String
}

input GroupMemberRelateToOneForCreateInput {
  create: GroupMemberCreateInput
  connect: GroupMemberWhereUniqueInput
}

type File {
  id: ID!
  assignedTo: String
  name: String
  path: String
  category: String
  note: String
  url: String
  mime: String
  size: String
  metadata: String
  createdAt: DateTime
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  assignedTo: StringFilter
  name: StringFilter
  path: StringFilter
  category: StringFilter
  note: StringFilter
  url: StringFilter
  mime: StringFilter
  size: StringFilter
  metadata: StringFilter
  createdAt: DateTimeNullableFilter
}

input FileOrderByInput {
  id: OrderDirection
  assignedTo: OrderDirection
  name: OrderDirection
  path: OrderDirection
  category: OrderDirection
  note: OrderDirection
  url: OrderDirection
  mime: OrderDirection
  size: OrderDirection
  metadata: OrderDirection
  createdAt: OrderDirection
}

input FileUpdateInput {
  assignedTo: String
  name: String
  path: String
  category: String
  note: String
  url: String
  mime: String
  size: String
  metadata: String
  createdAt: DateTime
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  assignedTo: String
  name: String
  path: String
  category: String
  note: String
  url: String
  mime: String
  size: String
  metadata: String
  createdAt: DateTime
}

type Application {
  id: ID!
  name: String
  email: String
  phoneNumber: String
  country: String
  applicationDate: DateTime
  status: String
  memberType: String
  society: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  country: StringFilter
  applicationDate: DateTimeNullableFilter
  status: StringFilter
  memberType: StringFilter
  society: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ApplicationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  country: OrderDirection
  applicationDate: OrderDirection
  status: OrderDirection
  memberType: OrderDirection
  society: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ApplicationUpdateInput {
  name: String
  email: String
  phoneNumber: String
  country: String
  applicationDate: DateTime
  status: String
  memberType: String
  society: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ApplicationUpdateArgs {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateInput!
}

input ApplicationCreateInput {
  name: String
  email: String
  phoneNumber: String
  country: String
  applicationDate: DateTime
  status: String
  memberType: String
  society: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Society {
  id: ID!
  name: String
  description: String
  address: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SocietyWhereUniqueInput {
  id: ID
}

input SocietyWhereInput {
  AND: [SocietyWhereInput!]
  OR: [SocietyWhereInput!]
  NOT: [SocietyWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  address: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SocietyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  address: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SocietyUpdateInput {
  name: String
  description: String
  address: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SocietyUpdateArgs {
  where: SocietyWhereUniqueInput!
  data: SocietyUpdateInput!
}

input SocietyCreateInput {
  name: String
  description: String
  address: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Event {
  id: ID!
  title: String
  description: String
  startDate: DateTime
  endDate: DateTime
  location: String
  isCancelled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  location: StringFilter
  isCancelled: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  location: OrderDirection
  isCancelled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  title: String
  description: String
  startDate: DateTime
  endDate: DateTime
  location: String
  isCancelled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  title: String
  description: String
  startDate: DateTime
  endDate: DateTime
  location: String
  isCancelled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type NetforumLog {
  id: ID!
  topic: String
  metadata: String
  createdAt: DateTime
}

input NetforumLogWhereUniqueInput {
  id: ID
}

input NetforumLogWhereInput {
  AND: [NetforumLogWhereInput!]
  OR: [NetforumLogWhereInput!]
  NOT: [NetforumLogWhereInput!]
  id: IDFilter
  topic: StringFilter
  metadata: StringFilter
  createdAt: DateTimeNullableFilter
}

input NetforumLogOrderByInput {
  id: OrderDirection
  topic: OrderDirection
  metadata: OrderDirection
  createdAt: OrderDirection
}

input NetforumLogUpdateInput {
  topic: String
  metadata: String
  createdAt: DateTime
}

input NetforumLogUpdateArgs {
  where: NetforumLogWhereUniqueInput!
  data: NetforumLogUpdateInput!
}

input NetforumLogCreateInput {
  topic: String
  metadata: String
  createdAt: DateTime
}

type WPLog {
  id: ID!
  topic: String
  metadata: String
  createdAt: DateTime
}

input WPLogWhereUniqueInput {
  id: ID
}

input WPLogWhereInput {
  AND: [WPLogWhereInput!]
  OR: [WPLogWhereInput!]
  NOT: [WPLogWhereInput!]
  id: IDFilter
  topic: StringFilter
  metadata: StringFilter
  createdAt: DateTimeNullableFilter
}

input WPLogOrderByInput {
  id: OrderDirection
  topic: OrderDirection
  metadata: OrderDirection
  createdAt: OrderDirection
}

input WPLogUpdateInput {
  topic: String
  metadata: String
  createdAt: DateTime
}

input WPLogUpdateArgs {
  where: WPLogWhereUniqueInput!
  data: WPLogUpdateInput!
}

input WPLogCreateInput {
  topic: String
  metadata: String
  createdAt: DateTime
}

type ServicePurchase {
  id: ID!
  product: String
  type: String
  total: Float
  balanceDue: Float
  cancelled: Boolean
  cancelledAt: DateTime
  note: String
  createdAt: DateTime
}

input ServicePurchaseWhereUniqueInput {
  id: ID
}

input ServicePurchaseWhereInput {
  AND: [ServicePurchaseWhereInput!]
  OR: [ServicePurchaseWhereInput!]
  NOT: [ServicePurchaseWhereInput!]
  id: IDFilter
  product: StringFilter
  type: StringFilter
  total: FloatNullableFilter
  balanceDue: FloatNullableFilter
  cancelled: BooleanFilter
  cancelledAt: DateTimeNullableFilter
  note: StringFilter
  createdAt: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ServicePurchaseOrderByInput {
  id: OrderDirection
  product: OrderDirection
  type: OrderDirection
  total: OrderDirection
  balanceDue: OrderDirection
  cancelled: OrderDirection
  cancelledAt: OrderDirection
  note: OrderDirection
  createdAt: OrderDirection
}

input ServicePurchaseUpdateInput {
  product: String
  type: String
  total: Float
  balanceDue: Float
  cancelled: Boolean
  cancelledAt: DateTime
  note: String
  createdAt: DateTime
}

input ServicePurchaseUpdateArgs {
  where: ServicePurchaseWhereUniqueInput!
  data: ServicePurchaseUpdateInput!
}

input ServicePurchaseCreateInput {
  product: String
  type: String
  total: Float
  balanceDue: Float
  cancelled: Boolean
  cancelledAt: DateTime
  note: String
  createdAt: DateTime
}

type ProductFulfillment {
  id: ID!
  product: String
  package: String
  price: Float
  quantity: Float
  total: Float
  balance: Float
  shipped: Boolean
  returnedCancelled: Boolean
  returnedCancelledAt: DateTime
  note: String
}

input ProductFulfillmentWhereUniqueInput {
  id: ID
}

input ProductFulfillmentWhereInput {
  AND: [ProductFulfillmentWhereInput!]
  OR: [ProductFulfillmentWhereInput!]
  NOT: [ProductFulfillmentWhereInput!]
  id: IDFilter
  product: StringFilter
  package: StringFilter
  price: FloatNullableFilter
  quantity: FloatNullableFilter
  total: FloatNullableFilter
  balance: FloatNullableFilter
  shipped: BooleanFilter
  returnedCancelled: BooleanFilter
  returnedCancelledAt: DateTimeNullableFilter
  note: StringFilter
}

input ProductFulfillmentOrderByInput {
  id: OrderDirection
  product: OrderDirection
  package: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
  total: OrderDirection
  balance: OrderDirection
  shipped: OrderDirection
  returnedCancelled: OrderDirection
  returnedCancelledAt: OrderDirection
  note: OrderDirection
}

input ProductFulfillmentUpdateInput {
  product: String
  package: String
  price: Float
  quantity: Float
  total: Float
  balance: Float
  shipped: Boolean
  returnedCancelled: Boolean
  returnedCancelledAt: DateTime
  note: String
}

input ProductFulfillmentUpdateArgs {
  where: ProductFulfillmentWhereUniqueInput!
  data: ProductFulfillmentUpdateInput!
}

input ProductFulfillmentCreateInput {
  product: String
  package: String
  price: Float
  quantity: Float
  total: Float
  balance: Float
  shipped: Boolean
  returnedCancelled: Boolean
  returnedCancelledAt: DateTime
  note: String
}

type InvoiceBatch {
  id: ID!
  customer: String
  batchID: String
  isOpen: Boolean
  closedAt: DateTime
  createdAt: DateTime
}

input InvoiceBatchWhereUniqueInput {
  id: ID
}

input InvoiceBatchWhereInput {
  AND: [InvoiceBatchWhereInput!]
  OR: [InvoiceBatchWhereInput!]
  NOT: [InvoiceBatchWhereInput!]
  id: IDFilter
  customer: StringFilter
  batchID: StringFilter
  isOpen: BooleanFilter
  closedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input InvoiceBatchOrderByInput {
  id: OrderDirection
  customer: OrderDirection
  batchID: OrderDirection
  isOpen: OrderDirection
  closedAt: OrderDirection
  createdAt: OrderDirection
}

input InvoiceBatchUpdateInput {
  customer: String
  batchID: String
  isOpen: Boolean
  closedAt: DateTime
  createdAt: DateTime
}

input InvoiceBatchUpdateArgs {
  where: InvoiceBatchWhereUniqueInput!
  data: InvoiceBatchUpdateInput!
}

input InvoiceBatchCreateInput {
  customer: String
  batchID: String
  isOpen: Boolean
  closedAt: DateTime
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createMailSendLog(data: MailSendLogCreateInput!): MailSendLog
  createMailSendLogs(data: [MailSendLogCreateInput!]!): [MailSendLog]
  updateMailSendLog(
    where: MailSendLogWhereUniqueInput!
    data: MailSendLogUpdateInput!
  ): MailSendLog
  updateMailSendLogs(data: [MailSendLogUpdateArgs!]!): [MailSendLog]
  deleteMailSendLog(where: MailSendLogWhereUniqueInput!): MailSendLog
  deleteMailSendLogs(where: [MailSendLogWhereUniqueInput!]!): [MailSendLog]
  createServerLog(data: ServerLogCreateInput!): ServerLog
  createServerLogs(data: [ServerLogCreateInput!]!): [ServerLog]
  updateServerLog(
    where: ServerLogWhereUniqueInput!
    data: ServerLogUpdateInput!
  ): ServerLog
  updateServerLogs(data: [ServerLogUpdateArgs!]!): [ServerLog]
  deleteServerLog(where: ServerLogWhereUniqueInput!): ServerLog
  deleteServerLogs(where: [ServerLogWhereUniqueInput!]!): [ServerLog]
  createServerError(data: ServerErrorCreateInput!): ServerError
  createServerErrors(data: [ServerErrorCreateInput!]!): [ServerError]
  updateServerError(
    where: ServerErrorWhereUniqueInput!
    data: ServerErrorUpdateInput!
  ): ServerError
  updateServerErrors(data: [ServerErrorUpdateArgs!]!): [ServerError]
  deleteServerError(where: ServerErrorWhereUniqueInput!): ServerError
  deleteServerErrors(where: [ServerErrorWhereUniqueInput!]!): [ServerError]
  createMailTrackHistory(data: MailTrackHistoryCreateInput!): MailTrackHistory
  createMailTrackHistories(
    data: [MailTrackHistoryCreateInput!]!
  ): [MailTrackHistory]
  updateMailTrackHistory(
    where: MailTrackHistoryWhereUniqueInput!
    data: MailTrackHistoryUpdateInput!
  ): MailTrackHistory
  updateMailTrackHistories(
    data: [MailTrackHistoryUpdateArgs!]!
  ): [MailTrackHistory]
  deleteMailTrackHistory(
    where: MailTrackHistoryWhereUniqueInput!
  ): MailTrackHistory
  deleteMailTrackHistories(
    where: [MailTrackHistoryWhereUniqueInput!]!
  ): [MailTrackHistory]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserLoginHistory(data: UserLoginHistoryCreateInput!): UserLoginHistory
  createUserLoginHistories(
    data: [UserLoginHistoryCreateInput!]!
  ): [UserLoginHistory]
  updateUserLoginHistory(
    where: UserLoginHistoryWhereUniqueInput!
    data: UserLoginHistoryUpdateInput!
  ): UserLoginHistory
  updateUserLoginHistories(
    data: [UserLoginHistoryUpdateArgs!]!
  ): [UserLoginHistory]
  deleteUserLoginHistory(
    where: UserLoginHistoryWhereUniqueInput!
  ): UserLoginHistory
  deleteUserLoginHistories(
    where: [UserLoginHistoryWhereUniqueInput!]!
  ): [UserLoginHistory]
  createUserFlag(data: UserFlagCreateInput!): UserFlag
  createUserFlags(data: [UserFlagCreateInput!]!): [UserFlag]
  updateUserFlag(
    where: UserFlagWhereUniqueInput!
    data: UserFlagUpdateInput!
  ): UserFlag
  updateUserFlags(data: [UserFlagUpdateArgs!]!): [UserFlag]
  deleteUserFlag(where: UserFlagWhereUniqueInput!): UserFlag
  deleteUserFlags(where: [UserFlagWhereUniqueInput!]!): [UserFlag]
  createUserSystemFlag(data: UserSystemFlagCreateInput!): UserSystemFlag
  createUserSystemFlags(data: [UserSystemFlagCreateInput!]!): [UserSystemFlag]
  updateUserSystemFlag(
    where: UserSystemFlagWhereUniqueInput!
    data: UserSystemFlagUpdateInput!
  ): UserSystemFlag
  updateUserSystemFlags(data: [UserSystemFlagUpdateArgs!]!): [UserSystemFlag]
  deleteUserSystemFlag(where: UserSystemFlagWhereUniqueInput!): UserSystemFlag
  deleteUserSystemFlags(
    where: [UserSystemFlagWhereUniqueInput!]!
  ): [UserSystemFlag]
  createUserEducationRecord(
    data: UserEducationRecordCreateInput!
  ): UserEducationRecord
  createUserEducationRecords(
    data: [UserEducationRecordCreateInput!]!
  ): [UserEducationRecord]
  updateUserEducationRecord(
    where: UserEducationRecordWhereUniqueInput!
    data: UserEducationRecordUpdateInput!
  ): UserEducationRecord
  updateUserEducationRecords(
    data: [UserEducationRecordUpdateArgs!]!
  ): [UserEducationRecord]
  deleteUserEducationRecord(
    where: UserEducationRecordWhereUniqueInput!
  ): UserEducationRecord
  deleteUserEducationRecords(
    where: [UserEducationRecordWhereUniqueInput!]!
  ): [UserEducationRecord]
  createUserNote(data: UserNoteCreateInput!): UserNote
  createUserNotes(data: [UserNoteCreateInput!]!): [UserNote]
  updateUserNote(
    where: UserNoteWhereUniqueInput!
    data: UserNoteUpdateInput!
  ): UserNote
  updateUserNotes(data: [UserNoteUpdateArgs!]!): [UserNote]
  deleteUserNote(where: UserNoteWhereUniqueInput!): UserNote
  deleteUserNotes(where: [UserNoteWhereUniqueInput!]!): [UserNote]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createGroupMember(data: GroupMemberCreateInput!): GroupMember
  createGroupMembers(data: [GroupMemberCreateInput!]!): [GroupMember]
  updateGroupMember(
    where: GroupMemberWhereUniqueInput!
    data: GroupMemberUpdateInput!
  ): GroupMember
  updateGroupMembers(data: [GroupMemberUpdateArgs!]!): [GroupMember]
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteGroupMembers(where: [GroupMemberWhereUniqueInput!]!): [GroupMember]
  createGroupMemberFlag(data: GroupMemberFlagCreateInput!): GroupMemberFlag
  createGroupMemberFlags(
    data: [GroupMemberFlagCreateInput!]!
  ): [GroupMemberFlag]
  updateGroupMemberFlag(
    where: GroupMemberFlagWhereUniqueInput!
    data: GroupMemberFlagUpdateInput!
  ): GroupMemberFlag
  updateGroupMemberFlags(data: [GroupMemberFlagUpdateArgs!]!): [GroupMemberFlag]
  deleteGroupMemberFlag(
    where: GroupMemberFlagWhereUniqueInput!
  ): GroupMemberFlag
  deleteGroupMemberFlags(
    where: [GroupMemberFlagWhereUniqueInput!]!
  ): [GroupMemberFlag]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createApplication(data: ApplicationCreateInput!): Application
  createApplications(data: [ApplicationCreateInput!]!): [Application]
  updateApplication(
    where: ApplicationWhereUniqueInput!
    data: ApplicationUpdateInput!
  ): Application
  updateApplications(data: [ApplicationUpdateArgs!]!): [Application]
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteApplications(where: [ApplicationWhereUniqueInput!]!): [Application]
  createSociety(data: SocietyCreateInput!): Society
  createSocieties(data: [SocietyCreateInput!]!): [Society]
  updateSociety(
    where: SocietyWhereUniqueInput!
    data: SocietyUpdateInput!
  ): Society
  updateSocieties(data: [SocietyUpdateArgs!]!): [Society]
  deleteSociety(where: SocietyWhereUniqueInput!): Society
  deleteSocieties(where: [SocietyWhereUniqueInput!]!): [Society]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createNetforumLog(data: NetforumLogCreateInput!): NetforumLog
  createNetforumLogs(data: [NetforumLogCreateInput!]!): [NetforumLog]
  updateNetforumLog(
    where: NetforumLogWhereUniqueInput!
    data: NetforumLogUpdateInput!
  ): NetforumLog
  updateNetforumLogs(data: [NetforumLogUpdateArgs!]!): [NetforumLog]
  deleteNetforumLog(where: NetforumLogWhereUniqueInput!): NetforumLog
  deleteNetforumLogs(where: [NetforumLogWhereUniqueInput!]!): [NetforumLog]
  createWPLog(data: WPLogCreateInput!): WPLog
  createWPLogs(data: [WPLogCreateInput!]!): [WPLog]
  updateWPLog(where: WPLogWhereUniqueInput!, data: WPLogUpdateInput!): WPLog
  updateWPLogs(data: [WPLogUpdateArgs!]!): [WPLog]
  deleteWPLog(where: WPLogWhereUniqueInput!): WPLog
  deleteWPLogs(where: [WPLogWhereUniqueInput!]!): [WPLog]
  createServicePurchase(data: ServicePurchaseCreateInput!): ServicePurchase
  createServicePurchases(
    data: [ServicePurchaseCreateInput!]!
  ): [ServicePurchase]
  updateServicePurchase(
    where: ServicePurchaseWhereUniqueInput!
    data: ServicePurchaseUpdateInput!
  ): ServicePurchase
  updateServicePurchases(data: [ServicePurchaseUpdateArgs!]!): [ServicePurchase]
  deleteServicePurchase(
    where: ServicePurchaseWhereUniqueInput!
  ): ServicePurchase
  deleteServicePurchases(
    where: [ServicePurchaseWhereUniqueInput!]!
  ): [ServicePurchase]
  createProductFulfillment(
    data: ProductFulfillmentCreateInput!
  ): ProductFulfillment
  createProductFulfillments(
    data: [ProductFulfillmentCreateInput!]!
  ): [ProductFulfillment]
  updateProductFulfillment(
    where: ProductFulfillmentWhereUniqueInput!
    data: ProductFulfillmentUpdateInput!
  ): ProductFulfillment
  updateProductFulfillments(
    data: [ProductFulfillmentUpdateArgs!]!
  ): [ProductFulfillment]
  deleteProductFulfillment(
    where: ProductFulfillmentWhereUniqueInput!
  ): ProductFulfillment
  deleteProductFulfillments(
    where: [ProductFulfillmentWhereUniqueInput!]!
  ): [ProductFulfillment]
  createInvoiceBatch(data: InvoiceBatchCreateInput!): InvoiceBatch
  createInvoiceBatches(data: [InvoiceBatchCreateInput!]!): [InvoiceBatch]
  updateInvoiceBatch(
    where: InvoiceBatchWhereUniqueInput!
    data: InvoiceBatchUpdateInput!
  ): InvoiceBatch
  updateInvoiceBatches(data: [InvoiceBatchUpdateArgs!]!): [InvoiceBatch]
  deleteInvoiceBatch(where: InvoiceBatchWhereUniqueInput!): InvoiceBatch
  deleteInvoiceBatches(where: [InvoiceBatchWhereUniqueInput!]!): [InvoiceBatch]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    adminPassword: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authclient_login(
    email: String!
    password: String!
    browserId: String
  ): ClientItemAuthenticationWithPasswordResult
  authclient_register(
    email: String!
    firstName: String
    lastName: String
    password: String!
  ): Boolean
  authclient_requestPasswordReset(email: String!): Boolean
  authclient_resetPassword(token: String!, password: String!): Boolean
  authclient_changePassword(oldPassword: String!, newPassword: String!): Boolean
  user_setFlag(input: User_setFlagInput!): [UserFlag]
  file_upload(input: File_uploadInput!): FileUploadOutput
  file_uploadURL(input: File_uploadURLInput!): FileUploadURLOutput
  api_member_create(input: Api_member_createInput!): Api_Member_createOutput
  api_member_update(input: Api_member_updateInput!): Api_Member_updateOutput
  api_member_delete(input: Api_member_deleteInput!): Api_Member_deleteOutput
  api_education_create(
    input: Api_education_createInput!
  ): Api_Education_createOutput
  api_education_update(
    input: Api_education_updateInput!
  ): Api_Education_updateOutput
  api_education_delete(
    input: Api_education_deleteInput!
  ): Api_Education_deleteOutput
  api_note_create(input: Api_note_createInput!): Api_Note_createOutput
  api_note_update(input: Api_note_updateInput!): Api_Note_updateOutput
  api_note_delete(input: Api_note_deleteInput!): Api_Note_deleteOutput
  api_file_create(input: Api_file_createInput!): Api_File_createOutput
  api_file_update(input: Api_file_updateInput!): Api_File_updateOutput
  api_file_delete(input: Api_file_deleteInput!): Api_File_deleteOutput
  api_sync_from_netforum(
    input: Api_sync_from_netforumInput!
  ): Api_Sync_from_netforumOutput
  api_sync_from_wordpress(
    input: Api_sync_from_wordpressInput!
  ): Api_Sync_from_wordpressOutput
  api_sync_crm_wordpress(
    input: Api_sync_crm_wordpressInput!
  ): Api_Sync_crm_wordpressOutput
  api_sync_crm_netforum(
    input: Api_sync_crm_netforumInput!
  ): Api_Sync_crm_netforumOutput
  api_servicePurchase_create(
    input: Api_servicePurchase_createInput!
  ): Api_ServicePurchase_createOutput
  api_servicePurchase_update(
    input: Api_servicePurchase_updateInput!
  ): Api_ServicePurchase_updateOutput
  api_servicePurchase_delete(
    input: Api_servicePurchase_deleteInput!
  ): Api_ServicePurchase_deleteOutput
  api_productFulfillment_create(
    input: Api_productFulfillment_createInput!
  ): Api_ProductFulfillment_createOutput
  api_productFulfillment_update(
    input: Api_productFulfillment_updateInput!
  ): Api_ProductFulfillment_updateOutput
  api_productFulfillment_delete(
    input: Api_productFulfillment_deleteInput!
  ): Api_ProductFulfillment_deleteOutput
  api_invoiceBatch_create(
    input: Api_invoiceBatch_createInput!
  ): Api_InvoiceBatch_createOutput
  api_invoiceBatch_update(
    input: Api_invoiceBatch_updateInput!
  ): Api_InvoiceBatch_updateOutput
  api_invoiceBatch_delete(
    input: Api_invoiceBatch_deleteInput!
  ): Api_InvoiceBatch_deleteOutput
  api_application_create(
    input: Api_application_createInput!
  ): Api_Application_createOutput
  api_application_update(
    input: Api_application_updateInput!
  ): Api_Application_updateOutput
  api_application_delete(
    input: Api_application_deleteInput!
  ): Api_Application_deleteOutput
  api_society_create(input: Api_society_createInput!): Api_Society_createOutput
  api_society_update(input: Api_society_updateInput!): Api_Society_updateOutput
  api_society_delete(input: Api_society_deleteInput!): Api_Society_deleteOutput
  api_event_create(input: Api_event_createInput!): Api_Event_createOutput
  api_event_update(input: Api_event_updateInput!): Api_Event_updateOutput
  api_event_delete(input: Api_event_deleteInput!): Api_Event_deleteOutput
  api_invoice_create(input: Api_invoice_createInput!): Api_Invoice_createOutput
  api_invoice_update(input: Api_invoice_updateInput!): Api_Invoice_updateOutput
  api_invoice_delete(input: Api_invoice_deleteInput!): Api_Invoice_deleteOutput
}

union ClientItemAuthenticationWithPasswordResult =
  | ClientItemAuthenticationWithPasswordSuccess
  | ClientItemAuthenticationWithPasswordFailure

type ClientItemAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type ClientItemAuthenticationWithPasswordFailure {
  message: String!
}

union UserAuthenticationWithPasswordResult =
  | UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  adminPassword: String
}

type Query {
  mailSendLog(where: MailSendLogWhereUniqueInput!): MailSendLog
  mailSendLogs(
    where: MailSendLogWhereInput! = {}
    orderBy: [MailSendLogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: MailSendLogWhereUniqueInput
  ): [MailSendLog!]
  mailSendLogsCount(where: MailSendLogWhereInput! = {}): Int
  serverLog(where: ServerLogWhereUniqueInput!): ServerLog
  serverLogs(
    where: ServerLogWhereInput! = {}
    orderBy: [ServerLogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ServerLogWhereUniqueInput
  ): [ServerLog!]
  serverLogsCount(where: ServerLogWhereInput! = {}): Int
  serverError(where: ServerErrorWhereUniqueInput!): ServerError
  serverErrors(
    where: ServerErrorWhereInput! = {}
    orderBy: [ServerErrorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ServerErrorWhereUniqueInput
  ): [ServerError!]
  serverErrorsCount(where: ServerErrorWhereInput! = {}): Int
  mailTrackHistory(where: MailTrackHistoryWhereUniqueInput!): MailTrackHistory
  mailTrackHistories(
    where: MailTrackHistoryWhereInput! = {}
    orderBy: [MailTrackHistoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: MailTrackHistoryWhereUniqueInput
  ): [MailTrackHistory!]
  mailTrackHistoriesCount(where: MailTrackHistoryWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserWhereUniqueInput
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  userLoginHistory(where: UserLoginHistoryWhereUniqueInput!): UserLoginHistory
  userLoginHistories(
    where: UserLoginHistoryWhereInput! = {}
    orderBy: [UserLoginHistoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserLoginHistoryWhereUniqueInput
  ): [UserLoginHistory!]
  userLoginHistoriesCount(where: UserLoginHistoryWhereInput! = {}): Int
  userFlag(where: UserFlagWhereUniqueInput!): UserFlag
  userFlags(
    where: UserFlagWhereInput! = {}
    orderBy: [UserFlagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserFlagWhereUniqueInput
  ): [UserFlag!]
  userFlagsCount(where: UserFlagWhereInput! = {}): Int
  userSystemFlag(where: UserSystemFlagWhereUniqueInput!): UserSystemFlag
  userSystemFlags(
    where: UserSystemFlagWhereInput! = {}
    orderBy: [UserSystemFlagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserSystemFlagWhereUniqueInput
  ): [UserSystemFlag!]
  userSystemFlagsCount(where: UserSystemFlagWhereInput! = {}): Int
  userEducationRecord(
    where: UserEducationRecordWhereUniqueInput!
  ): UserEducationRecord
  userEducationRecords(
    where: UserEducationRecordWhereInput! = {}
    orderBy: [UserEducationRecordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserEducationRecordWhereUniqueInput
  ): [UserEducationRecord!]
  userEducationRecordsCount(where: UserEducationRecordWhereInput! = {}): Int
  userNote(where: UserNoteWhereUniqueInput!): UserNote
  userNotes(
    where: UserNoteWhereInput! = {}
    orderBy: [UserNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserNoteWhereUniqueInput
  ): [UserNote!]
  userNotesCount(where: UserNoteWhereInput! = {}): Int
  group(where: GroupWhereUniqueInput!): Group
  groups(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GroupWhereUniqueInput
  ): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupMembers(
    where: GroupMemberWhereInput! = {}
    orderBy: [GroupMemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GroupMemberWhereUniqueInput
  ): [GroupMember!]
  groupMembersCount(where: GroupMemberWhereInput! = {}): Int
  groupMemberFlag(where: GroupMemberFlagWhereUniqueInput!): GroupMemberFlag
  groupMemberFlags(
    where: GroupMemberFlagWhereInput! = {}
    orderBy: [GroupMemberFlagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GroupMemberFlagWhereUniqueInput
  ): [GroupMemberFlag!]
  groupMemberFlagsCount(where: GroupMemberFlagWhereInput! = {}): Int
  file(where: FileWhereUniqueInput!): File
  files(
    where: FileWhereInput! = {}
    orderBy: [FileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: FileWhereUniqueInput
  ): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  application(where: ApplicationWhereUniqueInput!): Application
  applications(
    where: ApplicationWhereInput! = {}
    orderBy: [ApplicationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ApplicationWhereUniqueInput
  ): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  society(where: SocietyWhereUniqueInput!): Society
  societies(
    where: SocietyWhereInput! = {}
    orderBy: [SocietyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: SocietyWhereUniqueInput
  ): [Society!]
  societiesCount(where: SocietyWhereInput! = {}): Int
  event(where: EventWhereUniqueInput!): Event
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: EventWhereUniqueInput
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  netforumLog(where: NetforumLogWhereUniqueInput!): NetforumLog
  netforumLogs(
    where: NetforumLogWhereInput! = {}
    orderBy: [NetforumLogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: NetforumLogWhereUniqueInput
  ): [NetforumLog!]
  netforumLogsCount(where: NetforumLogWhereInput! = {}): Int
  wPLog(where: WPLogWhereUniqueInput!): WPLog
  wPLogs(
    where: WPLogWhereInput! = {}
    orderBy: [WPLogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: WPLogWhereUniqueInput
  ): [WPLog!]
  wPLogsCount(where: WPLogWhereInput! = {}): Int
  servicePurchase(where: ServicePurchaseWhereUniqueInput!): ServicePurchase
  servicePurchases(
    where: ServicePurchaseWhereInput! = {}
    orderBy: [ServicePurchaseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ServicePurchaseWhereUniqueInput
  ): [ServicePurchase!]
  servicePurchasesCount(where: ServicePurchaseWhereInput! = {}): Int
  productFulfillment(
    where: ProductFulfillmentWhereUniqueInput!
  ): ProductFulfillment
  productFulfillments(
    where: ProductFulfillmentWhereInput! = {}
    orderBy: [ProductFulfillmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ProductFulfillmentWhereUniqueInput
  ): [ProductFulfillment!]
  productFulfillmentsCount(where: ProductFulfillmentWhereInput! = {}): Int
  invoiceBatch(where: InvoiceBatchWhereUniqueInput!): InvoiceBatch
  invoiceBatches(
    where: InvoiceBatchWhereInput! = {}
    orderBy: [InvoiceBatchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: InvoiceBatchWhereUniqueInput
  ): [InvoiceBatch!]
  invoiceBatchesCount(where: InvoiceBatchWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  ErrorTest: String
  group_get(input: Group_getInput!): GroupGetResult
  api_member_list(input: Api_member_listInput!): Api_Member_listOutput
  api_member_get(input: Api_member_getInput!): Api_Member_getOutput
  api_member_aggregate(
    input: Api_member_aggregateInput!
  ): Api_Member_aggregateOutput
  api_member_groupBy(input: Api_member_groupByInput!): Api_Member_groupByOutput
  api_education_list(input: Api_education_listInput!): Api_Education_listOutput
  api_education_get(input: Api_education_getInput!): Api_Education_getOutput
  api_education_aggregate(
    input: Api_education_aggregateInput!
  ): Api_Education_aggregateOutput
  api_education_groupBy(
    input: Api_education_groupByInput!
  ): Api_Education_groupByOutput
  api_note_list(input: Api_note_listInput!): Api_Note_listOutput
  api_note_get(input: Api_note_getInput!): Api_Note_getOutput
  api_file_list(input: Api_file_listInput!): Api_File_listOutput
  api_file_get(input: Api_file_getInput!): Api_File_getOutput
  api_wpportaluser_list(
    input: Api_wpportaluser_listInput!
  ): Api_Wpportaluser_listOutput
  api_wpportaluser_get(
    input: Api_wpportaluser_getInput!
  ): Api_Wpportaluser_getOutput
  api_timecheck(input: Api_timecheckInput!): Api_TimecheckOutput
  api_servicePurchase_list(
    input: Api_servicePurchase_listInput!
  ): Api_ServicePurchase_listOutput
  api_servicePurchase_get(
    input: Api_servicePurchase_getInput!
  ): Api_ServicePurchase_getOutput
  api_servicePurchase_groupBy(
    input: Api_servicePurchase_groupByInput!
  ): Api_ServicePurchase_groupByOutput
  api_servicePurchase_aggregate(
    input: Api_servicePurchase_aggregateInput!
  ): Api_ServicePurchase_aggregateOutput
  api_productFulfillment_list(
    input: Api_productFulfillment_listInput!
  ): Api_ProductFulfillment_listOutput
  api_productFulfillment_get(
    input: Api_productFulfillment_getInput!
  ): Api_ProductFulfillment_getOutput
  api_productFulfillment_aggregate(
    input: Api_productFulfillment_aggregateInput!
  ): Api_ProductFulfillment_aggregateOutput
  api_productFulfillment_groupBy(
    input: Api_productFulfillment_groupByInput!
  ): Api_ProductFulfillment_groupByOutput
  api_invoiceBatch_list(
    input: Api_invoiceBatch_listInput!
  ): Api_InvoiceBatch_listOutput
  api_invoiceBatch_get(
    input: Api_invoiceBatch_getInput!
  ): Api_InvoiceBatch_getOutput
  api_application_list(
    input: Api_application_listInput!
  ): Api_Application_listOutput
  api_application_get(
    input: Api_application_getInput!
  ): Api_Application_getOutput
  api_society_list(input: Api_society_listInput!): Api_Society_listOutput
  api_society_get(input: Api_society_getInput!): Api_Society_getOutput
  api_event_list(input: Api_event_listInput!): Api_Event_listOutput
  api_event_get(input: Api_event_getInput!): Api_Event_getOutput
  api_event_groupBy(input: Api_event_groupByInput!): Api_Event_groupByOutput
  api_event_aggregate(
    input: Api_event_aggregateInput!
  ): Api_Event_aggregateOutput
  api_invoice_list(input: Api_invoice_listInput!): Api_Invoice_listOutput
  api_invoice_get(input: Api_invoice_getInput!): Api_Invoice_getOutput
  api_invoice_groupBy(
    input: Api_invoice_groupByInput!
  ): Api_Invoice_groupByOutput
  api_invoice_aggregate(
    input: Api_invoice_aggregateInput!
  ): Api_Invoice_aggregateOutput
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type Time {
  iso: String
  data: String
}

type Subscription {
  ping_time: Time
  nf_sync_log: NF_SYNC_LOG
}

input User_setFlagInputData {
  key: String!
  value: String!
  description: String
  metadata: String
}

input User_setFlagInput {
  data: [User_setFlagInputData]!
}

type GroupGetResult {
  data: Group
}

input Group_getInput {
  groupID: String
}

type FileUploadOutputFiles {
  id: String
  url: String!
  filename: String!
}

type FileUploadOutput {
  files: [FileUploadOutputFiles]!
}

input File_uploadInputFiles {
  b64: String!
  mimetype: String
  filename: String!
}

input File_uploadInput {
  files: [File_uploadInputFiles]!
  saveToDB: Boolean
}

type FileUploadURLOutputFiles {
  id: String
  uploadURL: String
  viewURL: String
  fileName: String
}

type FileUploadURLOutput {
  files: [FileUploadURLOutputFiles]!
}

input File_uploadURLInputFiles {
  filename: String!
  mimetype: String
  size: Float
}

input File_uploadURLInput {
  files: [File_uploadURLInputFiles]!
  saveToDB: Boolean
}

type Api_Member_listOutputData {
  id: String
  email: String
  prefix: String
  name: String
  middleName: String
  lastName: String
  suffix: String
  society: String
  displayName: String
  avatar: String
  about: String
  home_phoneNumber: String
  business_phoneNumber: String
  cell_phoneNumber: String
  home_addressLine1: String
  home_addressLine2: String
  home_city: String
  home_state: String
  home_postalCode: String
  home_country: String
  business_addressLine1: String
  business_addressLine2: String
  business_city: String
  business_state: String
  business_postalCode: String
  business_country: String
  dental_degree: String
  dental_school: String
  dental_graduationYear: String
  ortho_degree: String
  ortho_school: String
  ortho_graduationYear: String
  postgraduate_degree: String
  postgraduate_school: String
  postgraduate_graduationYear: String
  joinDate: String
  rejoinDate: String
  effectiveDate: String
  expirationDate: String
  memberType: String
  memberPackage: String
  isBlacklisted: Boolean
  createdAt: String
  updatedAt: String
}

type Api_Member_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Member_listOutputPage {
  total: Float
  range: Api_Member_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Member_listOutput {
  data: [Api_Member_listOutputData]
  page: Api_Member_listOutputPage
}

input Api_member_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_member_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_member_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_member_listInputDataPageSort
  filter: [Api_member_listInputDataPageFilter]
  search: String
}

input Api_member_listInputData {
  page: Api_member_listInputDataPage
}

input Api_member_listInput {
  data: Api_member_listInputData!
}

type Api_Member_getOutputData {
  id: String
  email: String
  prefix: String
  name: String
  middleName: String
  lastName: String
  suffix: String
  society: String
  displayName: String
  avatar: String
  about: String
  home_phoneNumber: String
  business_phoneNumber: String
  cell_phoneNumber: String
  home_addressLine1: String
  home_addressLine2: String
  home_city: String
  home_state: String
  home_postalCode: String
  home_country: String
  business_addressLine1: String
  business_addressLine2: String
  business_city: String
  business_state: String
  business_postalCode: String
  business_country: String
  dental_degree: String
  dental_school: String
  dental_graduationYear: String
  ortho_degree: String
  ortho_school: String
  ortho_graduationYear: String
  postgraduate_degree: String
  postgraduate_school: String
  postgraduate_graduationYear: String
  joinDate: String
  rejoinDate: String
  effectiveDate: String
  expirationDate: String
  memberType: String
  memberPackage: String
  isBlacklisted: Boolean
  createdAt: String
  updatedAt: String
}

type Api_Member_getOutput {
  data: Api_Member_getOutputData
}

input Api_member_getInputData {
  id: String!
}

input Api_member_getInput {
  data: Api_member_getInputData!
}

type Api_Member_createOutput {
  count: Float
  ids: [String]
}

input Api_member_createInputDataData {
  email: String!
  prefix: String
  name: String!
  middleName: String
  lastName: String
  suffix: String
  society: String
  about: String
  home_phoneNumber: String
  business_phoneNumber: String
  cell_phoneNumber: String
  home_addressLine1: String
  home_addressLine2: String
  home_city: String
  home_state: String
  home_postalCode: String
  home_country: String
  business_addressLine1: String
  business_addressLine2: String
  business_city: String
  business_state: String
  business_postalCode: String
  business_country: String
  dental_degree: String
  dental_school: String
  dental_graduationYear: String
  ortho_degree: String
  ortho_school: String
  ortho_graduationYear: String
  postgraduate_degree: String
  postgraduate_school: String
  postgraduate_graduationYear: String
  joinDate: String
  rejoinDate: String
  effectiveDate: String
  expirationDate: String
  memberType: String
  memberPackage: String
  isBlacklisted: Boolean
}

input Api_member_createInputData {
  data: [Api_member_createInputDataData]!
}

input Api_member_createInput {
  data: Api_member_createInputData!
}

type Api_Member_updateOutput {
  count: Float
  ids: [String]
}

input Api_member_updateInputDataDataData {
  email: String
  prefix: String
  name: String
  middleName: String
  lastName: String
  suffix: String
  society: String
  about: String
  home_phoneNumber: String
  business_phoneNumber: String
  cell_phoneNumber: String
  home_addressLine1: String
  home_addressLine2: String
  home_city: String
  home_state: String
  home_postalCode: String
  home_country: String
  business_addressLine1: String
  business_addressLine2: String
  business_city: String
  business_state: String
  business_postalCode: String
  business_country: String
  dental_degree: String
  dental_school: String
  dental_graduationYear: String
  ortho_degree: String
  ortho_school: String
  ortho_graduationYear: String
  postgraduate_degree: String
  postgraduate_school: String
  postgraduate_graduationYear: String
  joinDate: String
  rejoinDate: String
  effectiveDate: String
  expirationDate: String
  memberType: String
  memberPackage: String
  isBlacklisted: Boolean
}

input Api_member_updateInputDataData {
  id: String!
  data: Api_member_updateInputDataDataData!
}

input Api_member_updateInputData {
  data: [Api_member_updateInputDataData]!
}

input Api_member_updateInput {
  data: Api_member_updateInputData!
}

type Api_Member_deleteOutput {
  count: Float
  ids: [String]
}

input Api_member_deleteInputData {
  data: [String]!
}

input Api_member_deleteInput {
  data: Api_member_deleteInputData!
}

type Api_Member_aggregateOutputBreakdown {
  countBy: String
  count: Float
}

type Api_Member_aggregateOutput {
  breakdown: [Api_Member_aggregateOutputBreakdown]
}

input Api_member_aggregateInputDataPageSort {
  field: String!
  order: String!
}

input Api_member_aggregateInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_member_aggregateInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_member_aggregateInputDataPageSort
  filter: [Api_member_aggregateInputDataPageFilter]
  search: String
}

input Api_member_aggregateInputData {
  countBy: [String]!
  operation: String!
  page: Api_member_aggregateInputDataPage
}

input Api_member_aggregateInput {
  data: Api_member_aggregateInputData!
}

type Api_Member_groupByOutputBreakdownCounts {
  countBy: String
  count: Float
}

type Api_Member_groupByOutputBreakdown {
  uniqueIdentifier: String
  counts: [Api_Member_groupByOutputBreakdownCounts]!
}

type Api_Member_groupByOutput {
  breakdown: [Api_Member_groupByOutputBreakdown]
}

input Api_member_groupByInputDataPageSort {
  field: String!
  order: String!
}

input Api_member_groupByInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_member_groupByInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_member_groupByInputDataPageSort
  filter: [Api_member_groupByInputDataPageFilter]
  search: String
}

input Api_member_groupByInputData {
  groupBy: [String]!
  countBy: [String]!
  operation: String!
  page: Api_member_groupByInputDataPage
}

input Api_member_groupByInput {
  data: Api_member_groupByInputData!
}

type Api_Education_listOutputData {
  id: String
  userId: String
  userName: String
  schoolName: String
  achievement: String
  dateOfAchievement: String
}

type Api_Education_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Education_listOutputPage {
  total: Float
  range: Api_Education_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Education_listOutput {
  data: [Api_Education_listOutputData]
  page: Api_Education_listOutputPage
}

input Api_education_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_education_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_education_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_education_listInputDataPageSort
  filter: [Api_education_listInputDataPageFilter]
  search: String
}

input Api_education_listInputData {
  page: Api_education_listInputDataPage
}

input Api_education_listInput {
  data: Api_education_listInputData!
}

type Api_Education_getOutputData {
  id: String
  userId: String
  userName: String
  schoolName: String
  achievement: String
  dateOfAchievement: String
}

type Api_Education_getOutput {
  data: Api_Education_getOutputData
}

input Api_education_getInputData {
  id: String!
}

input Api_education_getInput {
  data: Api_education_getInputData!
}

type Api_Education_createOutput {
  count: Float
  ids: [String]
}

input Api_education_createInputDataData {
  userId: String!
  courseID: String
  schoolName: String!
  achievement: String!
  dateOfAchievement: String!
}

input Api_education_createInputData {
  data: [Api_education_createInputDataData]!
}

input Api_education_createInput {
  data: Api_education_createInputData!
}

type Api_Education_updateOutput {
  count: Float
  ids: [String]
}

input Api_education_updateInputDataDataData {
  userId: String
  courseID: String
  schoolName: String
  achievement: String
  dateOfAchievement: String
}

input Api_education_updateInputDataData {
  id: String!
  data: Api_education_updateInputDataDataData!
}

input Api_education_updateInputData {
  data: [Api_education_updateInputDataData]!
}

input Api_education_updateInput {
  data: Api_education_updateInputData!
}

type Api_Education_deleteOutput {
  count: Float
  ids: [String]
}

input Api_education_deleteInputData {
  data: [String]!
}

input Api_education_deleteInput {
  data: Api_education_deleteInputData!
}

type Api_Education_aggregateOutputBreakdown {
  countBy: String
  count: Float
}

type Api_Education_aggregateOutput {
  breakdown: [Api_Education_aggregateOutputBreakdown]
}

input Api_education_aggregateInputDataPageSort {
  field: String!
  order: String!
}

input Api_education_aggregateInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_education_aggregateInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_education_aggregateInputDataPageSort
  filter: [Api_education_aggregateInputDataPageFilter]
  search: String
}

input Api_education_aggregateInputData {
  countBy: [String]!
  operation: String!
  page: Api_education_aggregateInputDataPage
}

input Api_education_aggregateInput {
  data: Api_education_aggregateInputData!
}

type Api_Education_groupByOutputBreakdownCounts {
  countBy: String
  count: Float
}

type Api_Education_groupByOutputBreakdown {
  uniqueIdentifier: String
  counts: [Api_Education_groupByOutputBreakdownCounts]!
}

type Api_Education_groupByOutput {
  breakdown: [Api_Education_groupByOutputBreakdown]
}

input Api_education_groupByInputDataPageSort {
  field: String!
  order: String!
}

input Api_education_groupByInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_education_groupByInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_education_groupByInputDataPageSort
  filter: [Api_education_groupByInputDataPageFilter]
  search: String
}

input Api_education_groupByInputData {
  groupBy: [String]!
  countBy: [String]!
  operation: String!
  page: Api_education_groupByInputDataPage
}

input Api_education_groupByInput {
  data: Api_education_groupByInputData!
}

type Api_Note_listOutputData {
  id: String
  userId: String
  userName: String
  content: String
  type: String
  title: String
  metadata: String
  createdAt: String
}

type Api_Note_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Note_listOutputPage {
  total: Float
  range: Api_Note_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Note_listOutput {
  data: [Api_Note_listOutputData]
  page: Api_Note_listOutputPage
}

input Api_note_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_note_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_note_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_note_listInputDataPageSort
  filter: [Api_note_listInputDataPageFilter]
  search: String
}

input Api_note_listInputData {
  page: Api_note_listInputDataPage
}

input Api_note_listInput {
  data: Api_note_listInputData!
}

type Api_Note_getOutputData {
  id: String
  userId: String
  userName: String
  content: String
  type: String
  title: String
  metadata: String
  createdAt: String
}

type Api_Note_getOutput {
  data: Api_Note_getOutputData
}

input Api_note_getInputData {
  id: String!
}

input Api_note_getInput {
  data: Api_note_getInputData!
}

type Api_Note_createOutput {
  count: Float
  ids: [String]
}

input Api_note_createInputDataData {
  userId: String
  content: String!
  type: String!
  title: String!
  metadata: String
}

input Api_note_createInputData {
  data: [Api_note_createInputDataData]!
}

input Api_note_createInput {
  data: Api_note_createInputData!
}

type Api_Note_updateOutput {
  count: Float
  ids: [String]
}

input Api_note_updateInputDataDataData {
  content: String
  type: String
  title: String
  metadata: String
}

input Api_note_updateInputDataData {
  id: String!
  data: Api_note_updateInputDataDataData!
}

input Api_note_updateInputData {
  data: [Api_note_updateInputDataData]!
}

input Api_note_updateInput {
  data: Api_note_updateInputData!
}

type Api_Note_deleteOutput {
  count: Float
  ids: [String]
}

input Api_note_deleteInputData {
  data: [String]!
}

input Api_note_deleteInput {
  data: Api_note_deleteInputData!
}

type Api_File_listOutputData {
  id: String
  assignedTo: String
  name: String
  url: String
  mime: String
  size: String
  metadata: String
  createdAt: String
  path: String
  category: String
  note: String
}

type Api_File_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_File_listOutputPage {
  total: Float
  range: Api_File_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_File_listOutput {
  data: [Api_File_listOutputData]
  page: Api_File_listOutputPage
}

input Api_file_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_file_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_file_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_file_listInputDataPageSort
  filter: [Api_file_listInputDataPageFilter]
  search: String
}

input Api_file_listInputData {
  page: Api_file_listInputDataPage
}

input Api_file_listInput {
  data: Api_file_listInputData!
}

type Api_File_getOutputData {
  id: String!
  assignedTo: String!
  name: String!
  url: String!
  mime: String!
  size: String!
  metadata: String!
  createdAt: String!
  path: String!
  category: String!
  note: String!
}

type Api_File_getOutput {
  data: Api_File_getOutputData
}

input Api_file_getInputData {
  id: String!
}

input Api_file_getInput {
  data: Api_file_getInputData!
}

type Api_File_createOutput {
  count: Float
  ids: [String]
}

input Api_file_createInputDataData {
  assignedTo: String
  name: String
  url: String
  mime: String
  size: String
  metadata: String
  path: String
  category: String
  note: String
}

input Api_file_createInputData {
  data: [Api_file_createInputDataData]!
}

input Api_file_createInput {
  data: Api_file_createInputData!
}

type Api_File_updateOutput {
  count: Float
  ids: [String]
}

input Api_file_updateInputDataDataData {
  name: String
  url: String
  mime: String
  size: String
  metadata: String
  path: String
  category: String
  note: String
}

input Api_file_updateInputDataData {
  id: String!
  data: Api_file_updateInputDataDataData!
}

input Api_file_updateInputData {
  data: [Api_file_updateInputDataData]!
}

input Api_file_updateInput {
  data: Api_file_updateInputData!
}

type Api_File_deleteOutput {
  count: Float
  ids: [String]
}

input Api_file_deleteInputData {
  data: [String]!
}

input Api_file_deleteInput {
  data: Api_file_deleteInputData!
}

type Api_Sync_from_netforumOutput {
  count: Float
}

input Api_sync_from_netforumInputData {
  id: String
}

input Api_sync_from_netforumInput {
  data: Api_sync_from_netforumInputData!
}

type Api_Sync_from_wordpressOutput {
  count: Float
}

input Api_sync_from_wordpressInputData {
  id: String
}

input Api_sync_from_wordpressInput {
  data: Api_sync_from_wordpressInputData!
}

type Api_Wpportaluser_listOutputDataProfile_fields {
  value: String
  group: String
  field_id: String
  field_type: String
}

type Api_Wpportaluser_listOutputDataCourses {
  course_id: Float
  title: String
  enrollment_date: String
  completion_date: String
  progress_percentage: Float
  completed_steps: Float
  total_steps: Float
  status: String
}

type Api_Wpportaluser_listOutputData {
  user_id: Float
  first_name: String
  last_name: String
  email: String
  registered_date: String
  avatar_url: String
  roles: [String]
  profile_fields: [Api_Wpportaluser_listOutputDataProfile_fields]
  courses_count: Float
  courses: [Api_Wpportaluser_listOutputDataCourses]
}

type Api_Wpportaluser_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Wpportaluser_listOutputPage {
  total: Float
  range: Api_Wpportaluser_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Wpportaluser_listOutput {
  data: [Api_Wpportaluser_listOutputData]
  page: Api_Wpportaluser_listOutputPage
}

input Api_wpportaluser_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_wpportaluser_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_wpportaluser_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_wpportaluser_listInputDataPageSort
  filter: [Api_wpportaluser_listInputDataPageFilter]
  search: String
}

input Api_wpportaluser_listInputData {
  page: Api_wpportaluser_listInputDataPage
}

input Api_wpportaluser_listInput {
  data: Api_wpportaluser_listInputData!
}

type Api_Wpportaluser_getOutputDataProfile_fields {
  value: String
  group: String
  field_id: String
  field_type: String
}

type Api_Wpportaluser_getOutputDataCourses {
  course_id: Float
  title: String
  enrollment_date: String
  completion_date: String
  progress_percentage: Float
  completed_steps: Float
  total_steps: Float
  status: String
}

type Api_Wpportaluser_getOutputData {
  user_id: Float
  first_name: String
  last_name: String
  email: String
  registered_date: String
  avatar_url: String
  roles: [String]
  profile_fields: [Api_Wpportaluser_getOutputDataProfile_fields]
  courses_count: Float
  courses: [Api_Wpportaluser_getOutputDataCourses]
}

type Api_Wpportaluser_getOutput {
  data: Api_Wpportaluser_getOutputData
}

input Api_wpportaluser_getInputData {
  wpID: String
  dbID: String
  email: String
}

input Api_wpportaluser_getInput {
  data: Api_wpportaluser_getInputData!
}

type Api_Sync_crm_wordpressOutput {
  success: Boolean
}

input Api_sync_crm_wordpressInputData {
  email: String!
  destination: String!
}

input Api_sync_crm_wordpressInput {
  data: Api_sync_crm_wordpressInputData!
}

type Api_Sync_crm_netforumOutput {
  success: Boolean
}

input Api_sync_crm_netforumInputData {
  email: String!
  destination: String!
}

input Api_sync_crm_netforumInput {
  data: Api_sync_crm_netforumInputData!
}

type Api_TimecheckOutput {
  time: String
}

input Api_timecheckInputData {
  key: String!
}

input Api_timecheckInput {
  data: Api_timecheckInputData!
}

type Api_ServicePurchase_listOutputData {
  id: String
  product: String
  type: String
  total: Float
  balanceDue: Float
  cancelled: Boolean
  cancelledAt: String
  note: String
  createdAt: String
}

type Api_ServicePurchase_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_ServicePurchase_listOutputPage {
  total: Float
  range: Api_ServicePurchase_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_ServicePurchase_listOutput {
  data: [Api_ServicePurchase_listOutputData]
  page: Api_ServicePurchase_listOutputPage
}

input Api_servicePurchase_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_servicePurchase_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_servicePurchase_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_servicePurchase_listInputDataPageSort
  filter: [Api_servicePurchase_listInputDataPageFilter]
  search: String
}

input Api_servicePurchase_listInputData {
  page: Api_servicePurchase_listInputDataPage
}

input Api_servicePurchase_listInput {
  data: Api_servicePurchase_listInputData!
}

type Api_ServicePurchase_getOutputData {
  id: String
  product: String
  type: String
  total: Float
  balanceDue: Float
  cancelled: Boolean
  cancelledAt: String
  note: String
  createdAt: String
}

type Api_ServicePurchase_getOutput {
  data: Api_ServicePurchase_getOutputData
}

input Api_servicePurchase_getInputData {
  id: String!
}

input Api_servicePurchase_getInput {
  data: Api_servicePurchase_getInputData!
}

type Api_ServicePurchase_createOutput {
  count: Float
  ids: [String]
}

input Api_servicePurchase_createInputDataData {
  product: String
  type: String
  total: Float
  balanceDue: Float
  note: String
  cancelled: Boolean
  cancelledAt: String
}

input Api_servicePurchase_createInputData {
  data: [Api_servicePurchase_createInputDataData]!
}

input Api_servicePurchase_createInput {
  data: Api_servicePurchase_createInputData!
}

type Api_ServicePurchase_updateOutput {
  count: Float
  ids: [String]
}

input Api_servicePurchase_updateInputDataDataData {
  product: String
  type: String
  total: Float
  balanceDue: Float
  cancelled: Boolean
  cancelledAt: String
  note: String
}

input Api_servicePurchase_updateInputDataData {
  id: String!
  data: Api_servicePurchase_updateInputDataDataData!
}

input Api_servicePurchase_updateInputData {
  data: [Api_servicePurchase_updateInputDataData]!
}

input Api_servicePurchase_updateInput {
  data: Api_servicePurchase_updateInputData!
}

type Api_ServicePurchase_deleteOutput {
  count: Float
  ids: [String]
}

input Api_servicePurchase_deleteInputData {
  data: [String]!
}

input Api_servicePurchase_deleteInput {
  data: Api_servicePurchase_deleteInputData!
}

type Api_ServicePurchase_groupByOutputBreakdownCounts {
  countBy: String
  count: Float
}

type Api_ServicePurchase_groupByOutputBreakdown {
  uniqueIdentifier: String
  counts: [Api_ServicePurchase_groupByOutputBreakdownCounts]!
}

type Api_ServicePurchase_groupByOutput {
  breakdown: [Api_ServicePurchase_groupByOutputBreakdown]
}

input Api_servicePurchase_groupByInputDataPageSort {
  field: String!
  order: String!
}

input Api_servicePurchase_groupByInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_servicePurchase_groupByInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_servicePurchase_groupByInputDataPageSort
  filter: [Api_servicePurchase_groupByInputDataPageFilter]
  search: String
}

input Api_servicePurchase_groupByInputData {
  groupBy: [String]!
  countBy: [String]!
  operation: String!
  type: String
  page: Api_servicePurchase_groupByInputDataPage
}

input Api_servicePurchase_groupByInput {
  data: Api_servicePurchase_groupByInputData!
}

type Api_ServicePurchase_aggregateOutputBreakdown {
  countBy: String
  count: Float
}

type Api_ServicePurchase_aggregateOutput {
  breakdown: [Api_ServicePurchase_aggregateOutputBreakdown]
}

input Api_servicePurchase_aggregateInputDataPageSort {
  field: String!
  order: String!
}

input Api_servicePurchase_aggregateInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_servicePurchase_aggregateInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_servicePurchase_aggregateInputDataPageSort
  filter: [Api_servicePurchase_aggregateInputDataPageFilter]
  search: String
}

input Api_servicePurchase_aggregateInputData {
  countBy: [String]!
  operation: String!
  page: Api_servicePurchase_aggregateInputDataPage
}

input Api_servicePurchase_aggregateInput {
  data: Api_servicePurchase_aggregateInputData!
}

type Api_ProductFulfillment_listOutputData {
  id: String
  product: String
  package: String
  price: Float
  quantity: Float
  total: Float
  balance: Float
  shipped: Boolean
  returnedCancelled: Boolean
  returnedCancelledAt: String
  note: String
}

type Api_ProductFulfillment_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_ProductFulfillment_listOutputPage {
  total: Float
  range: Api_ProductFulfillment_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_ProductFulfillment_listOutput {
  data: [Api_ProductFulfillment_listOutputData]
  page: Api_ProductFulfillment_listOutputPage
}

input Api_productFulfillment_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_productFulfillment_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_productFulfillment_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_productFulfillment_listInputDataPageSort
  filter: [Api_productFulfillment_listInputDataPageFilter]
  search: String
}

input Api_productFulfillment_listInputData {
  page: Api_productFulfillment_listInputDataPage
}

input Api_productFulfillment_listInput {
  data: Api_productFulfillment_listInputData!
}

type Api_ProductFulfillment_getOutputData {
  id: String
  product: String
  package: String
  price: Float
  quantity: Float
  total: Float
  balance: Float
  shipped: Boolean
  returnedCancelled: Boolean
  returnedCancelledAt: String
  note: String
}

type Api_ProductFulfillment_getOutput {
  data: Api_ProductFulfillment_getOutputData
}

input Api_productFulfillment_getInputData {
  id: String!
}

input Api_productFulfillment_getInput {
  data: Api_productFulfillment_getInputData!
}

type Api_ProductFulfillment_createOutput {
  count: Float
  ids: [String]
}

input Api_productFulfillment_createInputDataData {
  product: String
  package: String
  price: Float
  quantity: Float
  total: Float
  balance: Float
  returnedCancelled: Boolean
  returnedCancelledAt: String
  note: String
  shipped: Boolean
}

input Api_productFulfillment_createInputData {
  data: [Api_productFulfillment_createInputDataData]!
}

input Api_productFulfillment_createInput {
  data: Api_productFulfillment_createInputData!
}

type Api_ProductFulfillment_updateOutput {
  count: Float
  ids: [String]
}

input Api_productFulfillment_updateInputDataDataData {
  product: String
  package: String
  price: Float
  quantity: Float
  total: Float
  balance: Float
  shipped: Boolean
  returnedCancelled: Boolean
  returnedCancelledAt: String
  note: String
}

input Api_productFulfillment_updateInputDataData {
  id: String!
  data: Api_productFulfillment_updateInputDataDataData!
}

input Api_productFulfillment_updateInputData {
  data: [Api_productFulfillment_updateInputDataData]!
}

input Api_productFulfillment_updateInput {
  data: Api_productFulfillment_updateInputData!
}

type Api_ProductFulfillment_deleteOutput {
  count: Float
  ids: [String]
}

input Api_productFulfillment_deleteInputData {
  data: [String]!
}

input Api_productFulfillment_deleteInput {
  data: Api_productFulfillment_deleteInputData!
}

type Api_ProductFulfillment_aggregateOutputBreakdown {
  countBy: String
  count: Float
}

type Api_ProductFulfillment_aggregateOutput {
  breakdown: [Api_ProductFulfillment_aggregateOutputBreakdown]
}

input Api_productFulfillment_aggregateInputDataPageSort {
  field: String!
  order: String!
}

input Api_productFulfillment_aggregateInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_productFulfillment_aggregateInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_productFulfillment_aggregateInputDataPageSort
  filter: [Api_productFulfillment_aggregateInputDataPageFilter]
  search: String
}

input Api_productFulfillment_aggregateInputData {
  countBy: [String]!
  operation: String!
  page: Api_productFulfillment_aggregateInputDataPage
}

input Api_productFulfillment_aggregateInput {
  data: Api_productFulfillment_aggregateInputData!
}

type Api_ProductFulfillment_groupByOutputBreakdownCounts {
  countBy: String
  count: Float
}

type Api_ProductFulfillment_groupByOutputBreakdown {
  uniqueIdentifier: String
  counts: [Api_ProductFulfillment_groupByOutputBreakdownCounts]!
}

type Api_ProductFulfillment_groupByOutput {
  breakdown: [Api_ProductFulfillment_groupByOutputBreakdown]
}

input Api_productFulfillment_groupByInputDataPageSort {
  field: String!
  order: String!
}

input Api_productFulfillment_groupByInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_productFulfillment_groupByInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_productFulfillment_groupByInputDataPageSort
  filter: [Api_productFulfillment_groupByInputDataPageFilter]
  search: String
}

input Api_productFulfillment_groupByInputData {
  groupBy: [String]!
  countBy: [String]!
  operation: String!
  type: String
  page: Api_productFulfillment_groupByInputDataPage
}

input Api_productFulfillment_groupByInput {
  data: Api_productFulfillment_groupByInputData!
}

type Api_InvoiceBatch_listOutputData {
  id: String
  customer: String
  batchID: String
  isOpen: Boolean
  closedAt: String
  createdAt: String
}

type Api_InvoiceBatch_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_InvoiceBatch_listOutputPage {
  total: Float
  range: Api_InvoiceBatch_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_InvoiceBatch_listOutput {
  data: [Api_InvoiceBatch_listOutputData]
  page: Api_InvoiceBatch_listOutputPage
}

input Api_invoiceBatch_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_invoiceBatch_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_invoiceBatch_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_invoiceBatch_listInputDataPageSort
  filter: [Api_invoiceBatch_listInputDataPageFilter]
  search: String
}

input Api_invoiceBatch_listInputData {
  page: Api_invoiceBatch_listInputDataPage
}

input Api_invoiceBatch_listInput {
  data: Api_invoiceBatch_listInputData!
}

type Api_InvoiceBatch_getOutputData {
  id: String
  customer: String
  batchID: String
  isOpen: Boolean
  closedAt: String
  createdAt: String
}

type Api_InvoiceBatch_getOutput {
  data: Api_InvoiceBatch_getOutputData
}

input Api_invoiceBatch_getInputData {
  id: String!
}

input Api_invoiceBatch_getInput {
  data: Api_invoiceBatch_getInputData!
}

type Api_InvoiceBatch_createOutput {
  count: Float
  ids: [String]
}

input Api_invoiceBatch_createInputDataData {
  customer: String
  batchID: String
  isOpen: Boolean
  closedAt: String
}

input Api_invoiceBatch_createInputData {
  data: [Api_invoiceBatch_createInputDataData]!
}

input Api_invoiceBatch_createInput {
  data: Api_invoiceBatch_createInputData!
}

type Api_InvoiceBatch_updateOutput {
  count: Float
  ids: [String]
}

input Api_invoiceBatch_updateInputDataDataData {
  customer: String
  batchID: String
  isOpen: Boolean
  closedAt: String
}

input Api_invoiceBatch_updateInputDataData {
  id: String!
  data: Api_invoiceBatch_updateInputDataDataData!
}

input Api_invoiceBatch_updateInputData {
  data: [Api_invoiceBatch_updateInputDataData]!
}

input Api_invoiceBatch_updateInput {
  data: Api_invoiceBatch_updateInputData!
}

type Api_InvoiceBatch_deleteOutput {
  count: Float
  ids: [String]
}

input Api_invoiceBatch_deleteInputData {
  data: [String]!
}

input Api_invoiceBatch_deleteInput {
  data: Api_invoiceBatch_deleteInputData!
}

type Api_Application_listOutputData {
  id: String
  name: String
  email: String
  phoneNumber: String
  country: String
  status: String
  memberType: String
  society: String
  applicationDate: String
  createdAt: String
  updatedAt: String
}

type Api_Application_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Application_listOutputPage {
  total: Float
  range: Api_Application_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Application_listOutput {
  data: [Api_Application_listOutputData]
  page: Api_Application_listOutputPage
}

input Api_application_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_application_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_application_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_application_listInputDataPageSort
  filter: [Api_application_listInputDataPageFilter]
  search: String
}

input Api_application_listInputData {
  page: Api_application_listInputDataPage
}

input Api_application_listInput {
  data: Api_application_listInputData!
}

type Api_Application_getOutputData {
  id: String
  name: String
  email: String
  phoneNumber: String
  country: String
  status: String
  memberType: String
  society: String
  applicationDate: String
  createdAt: String
  updatedAt: String
}

type Api_Application_getOutput {
  data: Api_Application_getOutputData
}

input Api_application_getInputData {
  id: String!
}

input Api_application_getInput {
  data: Api_application_getInputData!
}

type Api_Application_createOutput {
  count: Float
  ids: [String]
}

input Api_application_createInputDataData {
  name: String
  email: String
  phoneNumber: String
  country: String
  status: String
  memberType: String
  society: String
}

input Api_application_createInputData {
  data: [Api_application_createInputDataData]!
}

input Api_application_createInput {
  data: Api_application_createInputData!
}

type Api_Application_updateOutput {
  count: Float
  ids: [String]
}

input Api_application_updateInputDataDataData {
  name: String
  email: String
  phoneNumber: String
  country: String
  status: String
  memberType: String
  society: String
}

input Api_application_updateInputDataData {
  id: String!
  data: Api_application_updateInputDataDataData!
}

input Api_application_updateInputData {
  data: [Api_application_updateInputDataData]!
}

input Api_application_updateInput {
  data: Api_application_updateInputData!
}

type Api_Application_deleteOutput {
  count: Float
  ids: [String]
}

input Api_application_deleteInputData {
  data: [String]!
}

input Api_application_deleteInput {
  data: Api_application_deleteInputData!
}

type Api_Society_listOutputData {
  id: String
  name: String
  description: String
  address: String
  createdAt: String
  updatedAt: String
}

type Api_Society_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Society_listOutputPage {
  total: Float
  range: Api_Society_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Society_listOutput {
  data: [Api_Society_listOutputData]
  page: Api_Society_listOutputPage
}

input Api_society_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_society_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_society_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_society_listInputDataPageSort
  filter: [Api_society_listInputDataPageFilter]
  search: String
}

input Api_society_listInputData {
  page: Api_society_listInputDataPage
}

input Api_society_listInput {
  data: Api_society_listInputData!
}

type Api_Society_getOutputData {
  id: String
  name: String
  description: String
  address: String
  createdAt: String
  updatedAt: String
}

type Api_Society_getOutput {
  data: Api_Society_getOutputData
}

input Api_society_getInputData {
  id: String!
}

input Api_society_getInput {
  data: Api_society_getInputData!
}

type Api_Society_createOutput {
  count: Float
  ids: [String]
}

input Api_society_createInputDataData {
  name: String
  description: String
  address: String
}

input Api_society_createInputData {
  data: [Api_society_createInputDataData]!
}

input Api_society_createInput {
  data: Api_society_createInputData!
}

type Api_Society_updateOutput {
  count: Float
  ids: [String]
}

input Api_society_updateInputDataDataData {
  name: String
  description: String
  address: String
}

input Api_society_updateInputDataData {
  id: String!
  data: Api_society_updateInputDataDataData!
}

input Api_society_updateInputData {
  data: [Api_society_updateInputDataData]!
}

input Api_society_updateInput {
  data: Api_society_updateInputData!
}

type Api_Society_deleteOutput {
  count: Float
  ids: [String]
}

input Api_society_deleteInputData {
  data: [String]!
}

input Api_society_deleteInput {
  data: Api_society_deleteInputData!
}

type Api_Event_listOutputData {
  id: String
  title: String
  description: String
  startDate: String
  endDate: String
  location: String
  isCancelled: Boolean
  createdAt: String
  updatedAt: String
}

type Api_Event_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Event_listOutputPage {
  total: Float
  range: Api_Event_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Event_listOutput {
  data: [Api_Event_listOutputData]
  page: Api_Event_listOutputPage
}

input Api_event_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_event_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_event_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_event_listInputDataPageSort
  filter: [Api_event_listInputDataPageFilter]
  search: String
}

input Api_event_listInputData {
  page: Api_event_listInputDataPage
}

input Api_event_listInput {
  data: Api_event_listInputData!
}

type Api_Event_getOutputData {
  id: String
  title: String
  description: String
  startDate: String
  endDate: String
  location: String
  isCancelled: Boolean
  createdAt: String
  updatedAt: String
}

type Api_Event_getOutput {
  data: Api_Event_getOutputData
}

input Api_event_getInputData {
  id: String!
}

input Api_event_getInput {
  data: Api_event_getInputData!
}

type Api_Event_createOutput {
  count: Float
  ids: [String]
}

input Api_event_createInputDataData {
  title: String
  description: String
  startDate: String
  endDate: String
  location: String
  isCancelled: Boolean
}

input Api_event_createInputData {
  data: [Api_event_createInputDataData]!
}

input Api_event_createInput {
  data: Api_event_createInputData!
}

type Api_Event_updateOutput {
  count: Float
  ids: [String]
}

input Api_event_updateInputDataDataData {
  title: String
  description: String
  startDate: String
  endDate: String
  location: String
  isCancelled: Boolean
}

input Api_event_updateInputDataData {
  id: String!
  data: Api_event_updateInputDataDataData!
}

input Api_event_updateInputData {
  data: [Api_event_updateInputDataData]!
}

input Api_event_updateInput {
  data: Api_event_updateInputData!
}

type Api_Event_deleteOutput {
  count: Float
  ids: [String]
}

input Api_event_deleteInputData {
  data: [String]!
}

input Api_event_deleteInput {
  data: Api_event_deleteInputData!
}

type Api_Event_groupByOutputBreakdownCounts {
  countBy: String
  count: Float
}

type Api_Event_groupByOutputBreakdown {
  uniqueIdentifier: String
  counts: [Api_Event_groupByOutputBreakdownCounts]!
}

type Api_Event_groupByOutput {
  breakdown: [Api_Event_groupByOutputBreakdown]
}

input Api_event_groupByInputDataPageSort {
  field: String!
  order: String!
}

input Api_event_groupByInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_event_groupByInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_event_groupByInputDataPageSort
  filter: [Api_event_groupByInputDataPageFilter]
  search: String
}

input Api_event_groupByInputData {
  groupBy: [String]!
  countBy: [String]!
  operation: String!
  type: String
  page: Api_event_groupByInputDataPage
}

input Api_event_groupByInput {
  data: Api_event_groupByInputData!
}

type Api_Event_aggregateOutputBreakdown {
  countBy: String
  count: Float
}

type Api_Event_aggregateOutput {
  breakdown: [Api_Event_aggregateOutputBreakdown]
}

input Api_event_aggregateInputDataPageSort {
  field: String!
  order: String!
}

input Api_event_aggregateInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_event_aggregateInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_event_aggregateInputDataPageSort
  filter: [Api_event_aggregateInputDataPageFilter]
  search: String
}

input Api_event_aggregateInputData {
  countBy: [String]!
  operation: String!
  page: Api_event_aggregateInputDataPage
}

input Api_event_aggregateInput {
  data: Api_event_aggregateInputData!
}

type Api_Invoice_listOutputDataItems {
  id: String!
  name: String!
  price: Float!
  quantity: Float!
}

type Api_Invoice_listOutputData {
  id: String
  customerName: String
  items: [Api_Invoice_listOutputDataItems]
  total: Float
  createdAt: String
  paidAt: String
  status: String
  paymentLink: String
  updatedAt: String
}

type Api_Invoice_listOutputPageRange {
  from: Float!
  to: Float!
}

type Api_Invoice_listOutputPage {
  total: Float
  range: Api_Invoice_listOutputPageRange
  page: Float
  pageSize: Float
}

type Api_Invoice_listOutput {
  data: [Api_Invoice_listOutputData]
  page: Api_Invoice_listOutputPage
}

input Api_invoice_listInputDataPageSort {
  field: String!
  order: String!
}

input Api_invoice_listInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_invoice_listInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_invoice_listInputDataPageSort
  filter: [Api_invoice_listInputDataPageFilter]
  search: String
}

input Api_invoice_listInputData {
  page: Api_invoice_listInputDataPage
}

input Api_invoice_listInput {
  data: Api_invoice_listInputData!
}

type Api_Invoice_getOutputDataItems {
  id: String!
  name: String!
  price: Float!
  quantity: Float!
}

type Api_Invoice_getOutputData {
  id: String
  customerName: String
  items: [Api_Invoice_getOutputDataItems]
  total: Float
  createdAt: String
  paidAt: String
  status: String
  paymentLink: String
  updatedAt: String
}

type Api_Invoice_getOutput {
  data: Api_Invoice_getOutputData
}

input Api_invoice_getInputData {
  id: String!
}

input Api_invoice_getInput {
  data: Api_invoice_getInputData!
}

type Api_Invoice_createOutput {
  count: Float
  ids: [String]
}

input Api_invoice_createInputDataDataItems {
  id: String!
  name: String!
  price: Float!
  quantity: Float!
}

input Api_invoice_createInputDataData {
  customerName: String
  items: [Api_invoice_createInputDataDataItems]
  total: Float
  status: String
  paymentLink: String
}

input Api_invoice_createInputData {
  data: [Api_invoice_createInputDataData]!
}

input Api_invoice_createInput {
  data: Api_invoice_createInputData!
}

type Api_Invoice_updateOutput {
  count: Float
  ids: [String]
}

input Api_invoice_updateInputDataDataDataItems {
  id: String!
  name: String!
  price: Float!
  quantity: Float!
}

input Api_invoice_updateInputDataDataData {
  customerName: String
  items: [Api_invoice_updateInputDataDataDataItems]
  total: Float
  paidAt: String
  status: String
  paymentLink: String
}

input Api_invoice_updateInputDataData {
  id: String!
  data: Api_invoice_updateInputDataDataData!
}

input Api_invoice_updateInputData {
  data: [Api_invoice_updateInputDataData]!
}

input Api_invoice_updateInput {
  data: Api_invoice_updateInputData!
}

type Api_Invoice_deleteOutput {
  count: Float
  ids: [String]
}

input Api_invoice_deleteInputData {
  data: [String]!
}

input Api_invoice_deleteInput {
  data: Api_invoice_deleteInputData!
}

type Api_Invoice_groupByOutputBreakdownCounts {
  countBy: String
  count: Float
}

type Api_Invoice_groupByOutputBreakdown {
  uniqueIdentifier: String
  counts: [Api_Invoice_groupByOutputBreakdownCounts]!
}

type Api_Invoice_groupByOutput {
  breakdown: [Api_Invoice_groupByOutputBreakdown]
}

input Api_invoice_groupByInputDataPageSort {
  field: String!
  order: String!
}

input Api_invoice_groupByInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_invoice_groupByInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_invoice_groupByInputDataPageSort
  filter: [Api_invoice_groupByInputDataPageFilter]
  search: String
}

input Api_invoice_groupByInputData {
  groupBy: [String]!
  countBy: [String]!
  operation: String!
  type: String
  page: Api_invoice_groupByInputDataPage
}

input Api_invoice_groupByInput {
  data: Api_invoice_groupByInputData!
}

type Api_Invoice_aggregateOutputBreakdown {
  countBy: String
  count: Float
}

type Api_Invoice_aggregateOutput {
  breakdown: [Api_Invoice_aggregateOutputBreakdown]
}

input Api_invoice_aggregateInputDataPageSort {
  field: String!
  order: String!
}

input Api_invoice_aggregateInputDataPageFilter {
  field: String!
  operation: String!
  value: String!
}

input Api_invoice_aggregateInputDataPage {
  page: Float
  pageSize: Float
  distinct: [String]
  sort: Api_invoice_aggregateInputDataPageSort
  filter: [Api_invoice_aggregateInputDataPageFilter]
  search: String
}

input Api_invoice_aggregateInputData {
  countBy: [String]!
  operation: String!
  page: Api_invoice_aggregateInputDataPage
}

input Api_invoice_aggregateInput {
  data: Api_invoice_aggregateInputData!
}

type NF_SYNC_LOG {
  message: String!
}
